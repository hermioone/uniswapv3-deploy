{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            },
            {
              "internalType": "bool",
              "name": "zeroForOne",
              "type": "bool"
            }
          ],
          "internalType": "struct UniswapV3Quoter.QuoteParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96After",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tickAfter",
          "type": "int24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2703cd93fb3e3aed9bed7985377b67650516bdaf26b75508e0ef74d3561a45a8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "651971",
    "logsBloom": "0x
    "blockHash": "0x8ce866f2eb49bbffcfc919bc44bd3e421393ecab023f79b99cb80998be61e589",
    "transactionHash": "0x2703cd93fb3e3aed9bed7985377b67650516bdaf26b75508e0ef74d3561a45a8",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "651971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "180c05407a83f7d74e669d548ac5e188",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapV3Quoter.QuoteParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96After\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tickAfter\",\"type\":\"int24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Quoter.sol\":\"UniswapV3Quoter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV3Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\nimport \\\"./interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./lib/TickMath.sol\\\";\\n\\ncontract UniswapV3Quoter {\\n    struct QuoteParams {\\n        address pool;\\n        uint256 amountIn;\\n        uint160 sqrtPriceLimitX96;\\n        bool zeroForOne;\\n    }\\n\\n    function quote(QuoteParams memory params)\\n        public\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            int24 tickAfter\\n        )\\n    {\\n        try\\n            IUniswapV3Pool(params.pool).swap(\\n                address(this),\\n                params.zeroForOne,\\n                params.amountIn,\\n                params.sqrtPriceLimitX96 == 0\\n                    ? (params.zeroForOne\\n                            ? TickMath.MIN_SQRT_RATIO + 1\\n                            : TickMath.MAX_SQRT_RATIO - 1\\n                    )\\n                    : params.sqrtPriceLimitX96,\\n                abi.encode(params.pool)\\n            )\\n        {} catch (bytes memory reason) {\\n            return abi.decode(reason, (uint256, uint160, int24));\\n        }\\n    }\\n\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes memory data\\n    ) external view {\\n        address pool = abi.decode(data, (address));\\n\\n        uint256 amountOut = amount0Delta > 0\\n            ? uint256(-amount1Delta)\\n            : uint256(-amount0Delta);\\n\\n        (uint160 sqrtPriceX96After, int24 tickAfter) = IUniswapV3Pool(pool)\\n            .slot0();\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, amountOut)\\n            mstore(add(ptr, 0x20), sqrtPriceX96After)\\n            mstore(add(ptr, 0x40), tickAfter)\\n            revert(ptr, 96)\\n        }\\n    }\\n}\",\"keccak256\":\"0x80da9d1aeb33159da7b6e66ed9e7ddd9f9eb2cdcea50c463fa36f0682b7c905f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3Pool {\\n    struct CallbackData {\\n        address token0;\\n        address token1;\\n        address payer;\\n    }\\n\\n    function slot0() external view returns (uint160 sqrtPriceX96, int24 tick);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256, int256);\\n}\",\"keccak256\":\"0x4e10f443963af3a324417271a7e79c40806b81196ba094e548cc6aea380762d0\",\"license\":\"MIT\"},\"contracts/lib/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\",\"keccak256\":\"0x4ed462707766eac6fb9e951a5825e487ed5a0a807b3bde8968e19d8704fbc05f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ada806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063482a3dc61461003b578063fa461e331461006d575b600080fd5b610055600480360381019061005091906104e5565b610089565b6040516100649392919061054c565b60405180910390f35b61008760048036038101906100829190610673565b610207565b005b6000806000836000015173ffffffffffffffffffffffffffffffffffffffff1663dd5a12d830866060015187602001516000896040015173ffffffffffffffffffffffffffffffffffffffff16146100e5578860400151610128565b886060015161011457600173fffd8963efd1fc6a506488495d951d5263988d2661010f9190610711565b610127565b60016401000276a36101269190610759565b5b5b896000015160405160200161013d91906107b0565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161016c959493929190610859565b60408051808303816000875af19250505080156101a757506040513d601f19601f820116820180604052508101906101a491906108c8565b60015b6101fd573d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b50808060200190518101906101f1919061095e565b93509350935050610200565b50505b9193909250565b60008180602001905181019061021d91906109ef565b90506000808513610237578461023290610a1c565b610242565b8361024190610a1c565b5b90506000808373ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b81526004016040805180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610a64565b91509150604051838152826020820152816040820152606081fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610332826102e9565b810181811067ffffffffffffffff82111715610351576103506102fa565b5b80604052505050565b60006103646102d0565b90506103708282610329565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a082610375565b9050919050565b6103b081610395565b81146103bb57600080fd5b50565b6000813590506103cd816103a7565b92915050565b6000819050919050565b6103e6816103d3565b81146103f157600080fd5b50565b600081359050610403816103dd565b92915050565b61041281610375565b811461041d57600080fd5b50565b60008135905061042f81610409565b92915050565b60008115159050919050565b61044a81610435565b811461045557600080fd5b50565b60008135905061046781610441565b92915050565b600060808284031215610483576104826102e4565b5b61048d608061035a565b9050600061049d848285016103be565b60008301525060206104b1848285016103f4565b60208301525060406104c584828501610420565b60408301525060606104d984828501610458565b60608301525092915050565b6000608082840312156104fb576104fa6102da565b5b60006105098482850161046d565b91505092915050565b61051b816103d3565b82525050565b61052a81610375565b82525050565b60008160020b9050919050565b61054681610530565b82525050565b60006060820190506105616000830186610512565b61056e6020830185610521565b61057b604083018461053d565b949350505050565b6000819050919050565b61059681610583565b81146105a157600080fd5b50565b6000813590506105b38161058d565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156105de576105dd6102fa565b5b6105e7826102e9565b9050602081019050919050565b82818337600083830152505050565b6000610616610611846105c3565b61035a565b905082815260208101848484011115610632576106316105be565b5b61063d8482856105f4565b509392505050565b600082601f83011261065a576106596105b9565b5b813561066a848260208601610603565b91505092915050565b60008060006060848603121561068c5761068b6102da565b5b600061069a868287016105a4565b93505060206106ab868287016105a4565b925050604084013567ffffffffffffffff8111156106cc576106cb6102df565b5b6106d886828701610645565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061071c82610375565b915061072783610375565b9250828203905073ffffffffffffffffffffffffffffffffffffffff811115610753576107526106e2565b5b92915050565b600061076482610375565b915061076f83610375565b9250828201905073ffffffffffffffffffffffffffffffffffffffff81111561079b5761079a6106e2565b5b92915050565b6107aa81610395565b82525050565b60006020820190506107c560008301846107a1565b92915050565b6107d481610435565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108145780820151818401526020810190506107f9565b60008484015250505050565b600061082b826107da565b61083581856107e5565b93506108458185602086016107f6565b61084e816102e9565b840191505092915050565b600060a08201905061086e60008301886107a1565b61087b60208301876107cb565b6108886040830186610512565b6108956060830185610521565b81810360808301526108a78184610820565b90509695505050505050565b6000815190506108c28161058d565b92915050565b600080604083850312156108df576108de6102da565b5b60006108ed858286016108b3565b92505060206108fe858286016108b3565b9150509250929050565b600081519050610917816103dd565b92915050565b60008151905061092c81610409565b92915050565b61093b81610530565b811461094657600080fd5b50565b60008151905061095881610932565b92915050565b600080600060608486031215610977576109766102da565b5b600061098586828701610908565b93505060206109968682870161091d565b92505060406109a786828701610949565b9150509250925092565b60006109bc82610375565b9050919050565b6109cc816109b1565b81146109d757600080fd5b50565b6000815190506109e9816109c3565b92915050565b600060208284031215610a0557610a046102da565b5b6000610a13848285016109da565b91505092915050565b6000610a2782610583565b91507f80000000000000000000000000000000000000000000000000000000000000008203610a5957610a586106e2565b5b816000039050919050565b60008060408385031215610a7b57610a7a6102da565b5b6000610a898582860161091d565b9250506020610a9a85828601610949565b915050925092905056fea2646970667358221220c2ff819e604b2439397fa2c1d5654c22a82b6ad3897c1b625a6646b866eeeeb964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063482a3dc61461003b578063fa461e331461006d575b600080fd5b610055600480360381019061005091906104e5565b610089565b6040516100649392919061054c565b60405180910390f35b61008760048036038101906100829190610673565b610207565b005b6000806000836000015173ffffffffffffffffffffffffffffffffffffffff1663dd5a12d830866060015187602001516000896040015173ffffffffffffffffffffffffffffffffffffffff16146100e5578860400151610128565b886060015161011457600173fffd8963efd1fc6a506488495d951d5263988d2661010f9190610711565b610127565b60016401000276a36101269190610759565b5b5b896000015160405160200161013d91906107b0565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161016c959493929190610859565b60408051808303816000875af19250505080156101a757506040513d601f19601f820116820180604052508101906101a491906108c8565b60015b6101fd573d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b50808060200190518101906101f1919061095e565b93509350935050610200565b50505b9193909250565b60008180602001905181019061021d91906109ef565b90506000808513610237578461023290610a1c565b610242565b8361024190610a1c565b5b90506000808373ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b81526004016040805180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610a64565b91509150604051838152826020820152816040820152606081fd5b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610332826102e9565b810181811067ffffffffffffffff82111715610351576103506102fa565b5b80604052505050565b60006103646102d0565b90506103708282610329565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a082610375565b9050919050565b6103b081610395565b81146103bb57600080fd5b50565b6000813590506103cd816103a7565b92915050565b6000819050919050565b6103e6816103d3565b81146103f157600080fd5b50565b600081359050610403816103dd565b92915050565b61041281610375565b811461041d57600080fd5b50565b60008135905061042f81610409565b92915050565b60008115159050919050565b61044a81610435565b811461045557600080fd5b50565b60008135905061046781610441565b92915050565b600060808284031215610483576104826102e4565b5b61048d608061035a565b9050600061049d848285016103be565b60008301525060206104b1848285016103f4565b60208301525060406104c584828501610420565b60408301525060606104d984828501610458565b60608301525092915050565b6000608082840312156104fb576104fa6102da565b5b60006105098482850161046d565b91505092915050565b61051b816103d3565b82525050565b61052a81610375565b82525050565b60008160020b9050919050565b61054681610530565b82525050565b60006060820190506105616000830186610512565b61056e6020830185610521565b61057b604083018461053d565b949350505050565b6000819050919050565b61059681610583565b81146105a157600080fd5b50565b6000813590506105b38161058d565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156105de576105dd6102fa565b5b6105e7826102e9565b9050602081019050919050565b82818337600083830152505050565b6000610616610611846105c3565b61035a565b905082815260208101848484011115610632576106316105be565b5b61063d8482856105f4565b509392505050565b600082601f83011261065a576106596105b9565b5b813561066a848260208601610603565b91505092915050565b60008060006060848603121561068c5761068b6102da565b5b600061069a868287016105a4565b93505060206106ab868287016105a4565b925050604084013567ffffffffffffffff8111156106cc576106cb6102df565b5b6106d886828701610645565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061071c82610375565b915061072783610375565b9250828203905073ffffffffffffffffffffffffffffffffffffffff811115610753576107526106e2565b5b92915050565b600061076482610375565b915061076f83610375565b9250828201905073ffffffffffffffffffffffffffffffffffffffff81111561079b5761079a6106e2565b5b92915050565b6107aa81610395565b82525050565b60006020820190506107c560008301846107a1565b92915050565b6107d481610435565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108145780820151818401526020810190506107f9565b60008484015250505050565b600061082b826107da565b61083581856107e5565b93506108458185602086016107f6565b61084e816102e9565b840191505092915050565b600060a08201905061086e60008301886107a1565b61087b60208301876107cb565b6108886040830186610512565b6108956060830185610521565b81810360808301526108a78184610820565b90509695505050505050565b6000815190506108c28161058d565b92915050565b600080604083850312156108df576108de6102da565b5b60006108ed858286016108b3565b92505060206108fe858286016108b3565b9150509250929050565b600081519050610917816103dd565b92915050565b60008151905061092c81610409565b92915050565b61093b81610530565b811461094657600080fd5b50565b60008151905061095881610932565b92915050565b600080600060608486031215610977576109766102da565b5b600061098586828701610908565b93505060206109968682870161091d565b92505060406109a786828701610949565b9150509250925092565b60006109bc82610375565b9050919050565b6109cc816109b1565b81146109d757600080fd5b50565b6000815190506109e9816109c3565b92915050565b600060208284031215610a0557610a046102da565b5b6000610a13848285016109da565b91505092915050565b6000610a2782610583565b91507f80000000000000000000000000000000000000000000000000000000000000008203610a5957610a586106e2565b5b816000039050919050565b60008060408385031215610a7b57610a7a6102da565b5b6000610a898582860161091d565b9250506020610a9a85828601610949565b915050925092905056fea2646970667358221220c2ff819e604b2439397fa2c1d5654c22a82b6ad3897c1b625a6646b866eeeeb964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}