{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTickRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroLiquidity",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slot0",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountSpecified",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int16",
          "name": "",
          "type": "int16"
        }
      ],
      "name": "tickBitmap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "name": "ticks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x818206e80419098f8ac264cec6bf2a55b41b0ab886861af77dfeaa3173b04e29",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3033679",
    "logsBloom": "0x
    "blockHash": "0xa5971c27c91b5b8c66d99d2fb9c334f30868171b2ee75bbbdde2ab423ff53514",
    "transactionHash": "0x818206e80419098f8ac264cec6bf2a55b41b0ab886861af77dfeaa3173b04e29",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3033679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "5602277097478614198912276234240",
    85176
  ],
  "numDeployments": 1,
  "solcInputHash": "b6f283a0fa56e024719514000d12753a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTickRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLiquidity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(address,bool,uint256,bytes)\":{\"params\":{\"amountSpecified\":\"\\u7528\\u6237\\u5e0c\\u671b\\u5356\\u51fa\\u7684 token \\u6570\\u91cf\",\"zeroForOne\":\"\\u7528\\u6765\\u63a7\\u5236\\u4ea4\\u6613\\u65b9\\u5411\\u7684 flag\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a true\\uff0c\\u662f\\u7528 token0 \\u5151\\u6362 token1\\uff1bfalse \\u5219\\u76f8\\u53cd\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c token0 \\u662fETH\\uff0ctoken1 \\u662fUSDC\\uff0c\\u5c06 zeroForOne \\u8bbe\\u7f6e\\u4e3a true \\u610f\\u5473\\u7740\\u7528 ETH \\u8d2d\\u4e70 USDC\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Pool.sol\":\"UniswapV3Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/UniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/Position.sol\\\";\\nimport \\\"./lib/Tick.sol\\\";\\nimport \\\"./lib/TickBitMap.sol\\\";\\nimport \\\"./lib/Math.sol\\\";\\nimport \\\"./lib/TickMath.sol\\\";\\nimport \\\"./lib/SwapMath.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\n\\ncontract UniswapV3Pool {\\n    error InvalidTickRange();\\n    error ZeroLiquidity();\\n    error InsufficientInputAmount(string tokenName, uint256 expected, uint256 actual);\\n\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    event Log(uint256 amount0, uint256 amount1);\\n\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    int24 internal constant MIN_TICK = -887272;\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    struct CallbackData {\\n        address token0;\\n        address token1;\\n        address payer;\\n    }\\n\\n    // \\u5f53\\u524d swap \\u7684\\u72b6\\u6001\\n    struct SwapState {\\n        // \\u5f85\\u4ea4\\u6362\\u7684 tokenIn \\u7684\\u91d1\\u989d\\n        uint256 amountSpecifiedRemaining;\\n        // \\u5df2\\u4ea4\\u6362\\u7684 tokenOut \\u7684\\u91d1\\u989d\\n        uint256 amountCalculated;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684 tick\\n        int24 tick;\\n    }\\n\\n    // \\u7ef4\\u62a4\\u5f53\\u524d\\u4ea4\\u6613\\u201d\\u4e00\\u6b65\\u201c\\u7684\\u72b6\\u6001\\n    struct StepState {\\n        // \\u5faa\\u73af\\u5f00\\u59cb\\u65f6\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceStartX96;\\n        // \\u80fd\\u591f\\u4e3a\\u4ea4\\u6613\\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\u7684\\u4e0b\\u4e00\\u4e2a\\u5df2\\u521d\\u59cb\\u5316\\u7684tick\\n        int24 nextTick;\\n        // \\u4e0b\\u4e00\\u4e2a tick \\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceNextX96;\\n        // amountIn \\u548c amountOut \\u662f\\u5f53\\u524d\\u5faa\\u73af\\u4e2d\\u6d41\\u52a8\\u6027\\u80fd\\u591f\\u63d0\\u4f9b\\u7684\\u6570\\u91cf\\n        uint256 amountIn;\\n        uint256 amountOut;\\n    }\\n\\n    struct Slot0 {\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d tick\\n        int24 tick;\\n    }\\n    Slot0 public slot0;\\n\\n    // \\u603b\\u7684\\u6d41\\u52a8\\u6027\\n    uint128 public liquidity;\\n\\n    mapping(int24 => Tick.Info) public ticks;\\n    // tick \\u7684\\u4f4d\\u56fe\\uff0ctick\\u662f int24\\uff0824bit\\u7684int\\uff09\\uff0ctick\\u7684\\u524d16\\u4f4d\\u662f key\\uff0c\\u7528\\u4e8e\\u4ece map \\u4e2d\\u627e\\u5230\\u5bf9\\u5e94\\u7684 value\\uff08\\u4f4d\\u56fe\\uff09\\n    // tick\\u7684\\u540e8\\u4f4d\\u662f\\u4f4d\\u56fe\\u7684key\\uff0c2 ** 8 \\u7684\\u8303\\u56f4\\u4e3a [0, 255]\\uff0c\\u8868\\u793a value \\u4e2d\\u54ea\\u4e00\\u4e2a\\u4f4d\\n    mapping(int16 => uint256) public tickBitmap;\\n    mapping(bytes32 => Position.Info) positions;\\n\\n    constructor(\\n        address token0_,\\n        address token1_,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    ) {\\n        token0 = token0_;\\n        token1 = token1_;\\n\\n        slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick});\\n    }\\n\\n    // \\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        emit Log(0, 0);\\n        if (lowerTick >= upperTick || lowerTick < MIN_TICK || upperTick > MAX_TICK) {\\n            revert InvalidTickRange();\\n        }\\n        if (amount <= 0) {\\n            revert ZeroLiquidity();\\n        }\\n\\n        // \\u66f4\\u65b0\\u4e0a\\u4e0b\\u8fb9\\u754c\\u7684 liquidity\\n        bool flippedLower = ticks.update(lowerTick, amount);\\n        bool flippedUpper = ticks.update(upperTick, amount);\\n        if (flippedLower) {\\n            tickBitmap.flipTick(lowerTick, 1);\\n        }\\n\\n        if (flippedUpper) {\\n            tickBitmap.flipTick(upperTick, 1);\\n        }\\n\\n        Position.Info storage position = positions.get(owner, lowerTick, upperTick);\\n        position.update(amount);\\n\\n        // amount0 = 0.998976618347425280 ether;\\n        // amount1 = 5000 ether;\\n\\n        amount0 = Math.calcAmount0Delta(\\n            TickMath.getSqrtRatioAtTick(slot0.tick),\\n            TickMath.getSqrtRatioAtTick(upperTick),\\n            amount\\n        );\\n\\n        amount1 = Math.calcAmount1Delta(\\n            TickMath.getSqrtRatioAtTick(slot0.tick),\\n            TickMath.getSqrtRatioAtTick(lowerTick),\\n            amount\\n        );\\n        emit Log(amount0, amount1);\\n\\n        liquidity += uint128(amount);\\n\\n        // \\u8c03\\u7528\\u56de\\u8c03\\u51fd\\u6570\\u8f6c\\u8d26\\uff0c\\u8f6c\\u8d26\\u91d1\\u989d\\u4e3a amount0 \\u548c amount1\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) {\\n            balance0Before = balance0();\\n        }\\n        if (amount1 > 0) {\\n            balance1Before = balance1();\\n        }\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0 && balance0Before + amount0 > balance0()) {\\n            revert InsufficientInputAmount(\\\"token0\\\", amount0, (balance0() - balance0Before));\\n        }\\n        if (amount1 > 0 && balance1Before + amount1 > balance1()) {\\n            revert InsufficientInputAmount(\\\"token1\\\", amount1, (balance1() - balance1Before));\\n        }\\n        emit Mint(msg.sender, owner, lowerTick, upperTick, amount, amount0, amount1);\\n    }\\n\\n    /// @param zeroForOne \\u7528\\u6765\\u63a7\\u5236\\u4ea4\\u6613\\u65b9\\u5411\\u7684 flag\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a true\\uff0c\\u662f\\u7528 token0 \\u5151\\u6362 token1\\uff1bfalse \\u5219\\u76f8\\u53cd\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c token0 \\u662fETH\\uff0ctoken1 \\u662fUSDC\\uff0c\\u5c06 zeroForOne \\u8bbe\\u7f6e\\u4e3a true \\u610f\\u5473\\u7740\\u7528 ETH \\u8d2d\\u4e70 USDC\\n    /// @param amountSpecified \\u7528\\u6237\\u5e0c\\u671b\\u5356\\u51fa\\u7684 token \\u6570\\u91cf\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        bytes calldata data\\n    ) public returns (int256 amount0, int256 amount1) {\\n        // TODO \\u9700\\u8981\\u628a\\u8fd9\\u4e9b\\u786c\\u7f16\\u7801\\u7684\\u66ff\\u6362\\u4e3a\\u8ba1\\u7b97\\n        int24 nextTick = 85184;\\n        uint160 nextPrice = 5604469350942327889444743441197;\\n        amount0 = -0.008396714242162444 ether;\\n        amount1 = 42 ether;\\n\\n        Slot0 memory slot0_ = slot0;\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: slot0_.sqrtPriceX96,\\n            tick: slot0_.tick\\n        });\\n\\n        // TODO \\u5728\\u8fd9\\u4e2a while \\u5faa\\u73af\\u4e2d liquidity \\u5e76\\u6ca1\\u6709\\u53d1\\u751f\\u6539\\u53d8\\uff0c\\u6240\\u4ee5\\u8fd9\\u91cc\\u53d1\\u751f\\u7684\\u4ea4\\u6613\\u8fd8\\u662f\\u5c40\\u9650\\u5728\\u4e00\\u4e2a tick \\u5185\\u7684\\n        // \\u5e76\\u6ca1\\u6709\\u8de8 tick\\n        while (state.amountSpecifiedRemaining > 0) {\\n            StepState memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n            (step.nextTick, ) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                1,\\n                zeroForOne\\n            );\\n            // \\u8ba1\\u7b97\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.nextTick);\\n\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut) = SwapMath\\n                .computeSwapStep(\\n                    step.sqrtPriceStartX96,\\n                    step.sqrtPriceNextX96,\\n                    liquidity,\\n                    state.amountSpecifiedRemaining\\n                );\\n\\n            state.amountSpecifiedRemaining -= step.amountIn;\\n            state.amountCalculated += step.amountOut;\\n            state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n        }\\n\\n        (amount0, amount1) = zeroForOne\\n            ? (\\n                int256(amountSpecified - state.amountSpecifiedRemaining),\\n                -int256(state.amountCalculated)\\n            )\\n            : (\\n                -int256(state.amountCalculated),\\n                int256(amountSpecified - state.amountSpecifiedRemaining)\\n            );\\n\\n        if (zeroForOne) {\\n            IERC20(token1).transfer(recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance0Before + uint256(amount0) > balance0())\\n                revert InsufficientInputAmount(\\\"token0\\\", uint256(amount0), (balance0() - balance0Before));\\n        } else {\\n            IERC20(token0).transfer(recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance1Before + uint256(amount1) > balance1())\\n                revert InsufficientInputAmount(\\\"token1\\\", uint256(amount1), (balance1() - balance1Before));\\n        }\\n\\n        emit Swap(\\n            msg.sender,\\n            recipient,\\n            amount0,\\n            amount1,\\n            slot0.sqrtPriceX96,\\n            liquidity,\\n            slot0.tick\\n        );\\n    }\\n\\n    function balance0() internal view returns (uint256) {\\n        return IERC20(token0).balanceOf(address(this));\\n    }\\n\\n    function balance1() internal view returns (uint256) {\\n        return IERC20(token1).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae3b40e8138ff39bcb1a5a82df1e735e5a0dcf72e017d92518f5a808f2e5c452\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3MintCallback {\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x4087b0a14d2737727495263a43d9e2398e1e96287e566715e6442612c6184f0e\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3SwapCallback {\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xc3c54870bbceb41a1de853ae4ed1a073d1e9bf8346e9d563a0f7a6abe1ce3a4e\",\"license\":\"MIT\"},\"contracts/lib/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x35398e97c656b7e313e9f4aebf45dff850f5762c153c1099f1efb622764d3e0a\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 2**96;\\n}\",\"keccak256\":\"0xe196a278342dc0a6d17851f211aada0e6a4b7b4397ec2cbc62b4938a08523496\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./FixedPoint96.sol\\\";\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\n\\nlibrary Math {\\n    /// @notice Calculates amount0 delta between two prices\\n    function calcAmount0Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        require(sqrtPriceAX96 > 0);\\n\\n        amount0 = divRoundingUp(\\n            mulDivRoundingUp(\\n                (uint256(liquidity) << FixedPoint96.RESOLUTION),\\n                (sqrtPriceBX96 - sqrtPriceAX96),\\n                sqrtPriceBX96\\n            ),\\n            sqrtPriceAX96\\n        );\\n    }\\n\\n    /// @notice Calculates amount1 delta between two prices\\n    /// TODO: round down when removing liquidity\\n    function calcAmount1Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        amount1 = mulDivRoundingUp(\\n            liquidity,\\n            (sqrtPriceBX96 - sqrtPriceAX96),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtPriceNextX96) {\\n        sqrtPriceNextX96 = zeroForOne\\n            ? getNextSqrtPriceFromAmount0RoundingUp(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            )\\n            : getNextSqrtPriceFromAmount1RoundingDown(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        uint256 numerator = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 product = amountIn * sqrtPriceX96;\\n\\n        // If product doesn't overflow, use the precise formula.\\n        if (product / amountIn == sqrtPriceX96) {\\n            uint256 denominator = numerator + product;\\n            if (denominator >= numerator) {\\n                return\\n                    uint160(\\n                        mulDivRoundingUp(numerator, sqrtPriceX96, denominator)\\n                    );\\n            }\\n        }\\n\\n        // If product overflows, use a less precise formula.\\n        return\\n            uint160(\\n                divRoundingUp(numerator, (numerator / sqrtPriceX96) + amountIn)\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        return\\n            sqrtPriceX96 +\\n            uint160((amountIn << FixedPoint96.RESOLUTION) / liquidity);\\n    }\\n\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function divRoundingUp(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        assembly {\\n            result := add(\\n                div(numerator, denominator),\\n                gt(mod(numerator, denominator), 0)\\n            )\\n        }\\n    }\\n}\",\"keccak256\":\"0x361c51ceeb298dea355d2de30dc4d382142d2b38f4c16391dd98cf739bf018e0\",\"license\":\"MIT\"},\"contracts/lib/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Position {\\n    struct Info {\\n        uint128 liquidity;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Position.Info) storage self,\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[\\n            keccak256(abi.encodePacked(owner, lowerTick, upperTick))\\n        ];\\n    }\\n\\n    function update(Info storage self, uint128 liquidityDelta) internal {\\n        uint128 liquidityBefore = self.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        self.liquidity = liquidityAfter;\\n    }\\n}\",\"keccak256\":\"0xd0f3469dabe9d8ef81663eed32c35f42d16dd0dec86ac9a8ae1c5a092886baa3\",\"license\":\"MIT\"},\"contracts/lib/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./Math.sol\\\";\\n\\nlibrary SwapMath {\\n    function computeSwapStep(\\n        uint160 sqrtPriceCurrentX96,\\n        uint160 sqrtPriceTargetX96,\\n        uint128 liquidity,\\n        uint256 amountRemaining\\n    )\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceNextX96, uint256 amountIn, uint256 amountOut)\\n    {\\n        bool zeroForOne = sqrtPriceCurrentX96 >= sqrtPriceTargetX96;\\n\\n        sqrtPriceNextX96 = Math.getNextSqrtPriceFromInput(\\n            sqrtPriceCurrentX96,\\n            liquidity,\\n            amountRemaining,\\n            zeroForOne\\n        );\\n\\n        amountIn = Math.calcAmount0Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n        amountOut = Math.calcAmount1Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n\\n        if (!zeroForOne) {\\n            (amountIn, amountOut) = (amountOut, amountIn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb29f9b5c2a6346ce95e27e840d61c658de8b91d961834e54e9d10bacf1dcd3a1\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Tick {\\n    struct Info {\\n        bool initialized;\\n        uint128 liquidity;\\n    }\\n\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint128 liquidityDelta\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage tickInfo = self[tick];\\n        uint128 liquidityBefore = tickInfo.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        if (liquidityBefore == 0) {\\n            tickInfo.initialized = true;\\n        }\\n        tickInfo.liquidity = liquidityAfter;\\n\\n        flipped = (liquidityAfter == 0) != (liquidityBefore == 0);\\n    }\\n}\",\"keccak256\":\"0xc69bf1d3121ff31ed99e609281f665d3f30d054bc0236ba87976ccf6a4844592\",\"license\":\"MIT\"},\"contracts/lib/TickBitMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(uint24(tick % 256));\\n    }\\n\\n    /// \\u7ffb\\u8f6c\\u4f4d\\u56fe\\u4e2d\\u7684\\u67d0\\u4e00\\u4f4d\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            // \\u5356\\u51fa token0\\uff08\\u5356\\u51fax\\u4e70\\u5165y\\uff09\\uff0c\\u6b64\\u65f6 tick \\u5e94\\u8be5\\u662f\\u9010\\u6e10\\u53d8\\u5927\\u7684\\uff0c\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\\n                : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(uint24((BitMath.leastSignificantBit(masked) - bitPos)))) * tickSpacing\\n                : (compressed + 1 + int24(uint24((type(uint8).max - bitPos)))) * tickSpacing;\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3df4d69497cd2b08b571b9911d091577bd9f9d6ad76d2277de2e156e57bbbad1\",\"license\":\"MIT\"},\"contracts/lib/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\",\"keccak256\":\"0x4ed462707766eac6fb9e951a5825e487ed5a0a807b3bde8968e19d8704fbc05f\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200384738038062003847833981810160405281019062000037919062000223565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018260020b8152506000808201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff1602179055509050505050505062000295565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017c826200014f565b9050919050565b6200018e816200016f565b81146200019a57600080fd5b50565b600081519050620001ae8162000183565b92915050565b620001bf816200014f565b8114620001cb57600080fd5b50565b600081519050620001df81620001b4565b92915050565b60008160020b9050919050565b620001fd81620001e5565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b6000806000806080858703121562000240576200023f6200014a565b5b600062000250878288016200019d565b945050602062000263878288016200019d565b93505060406200027687828801620001ce565b925050606062000289878288016200020c565b91505092959194509250565b60805160a051613570620002d760003960008181610a3101528181610e2701526117b50152600081816101cb01528181610bc7015261171401526135706000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635339c2961161005b5780635339c2961461011957806380c2c6ef14610149578063d21220a71461017a578063f30dba931461019857610088565b80630dfe16811461008d5780631a686502146100ab5780633850c7bd146100c95780633c8a7d8d146100e8575b600080fd5b6100956101c9565b6040516100a291906124fb565b60405180910390f35b6100b36101ed565b6040516100c09190612541565b60405180910390f35b6100d161020f565b6040516100df929190612587565b60405180910390f35b61010260048036038101906100fd91906126a3565b61024e565b604051610110929190612756565b60405180910390f35b610133600480360381019061012e91906127b8565b61070e565b60405161014091906127e5565b60405180910390f35b610163600480360381019061015e9190612864565b610726565b604051610171929190612905565b60405180910390f35b610182610e25565b60405161018f91906124fb565b60405180910390f35b6101b260048036038101906101ad919061292e565b610e49565b6040516101c092919061296a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460020b905082565b6000807fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b143676000806040516102839291906129d8565b60405180910390a18560020b8760020b1215806102c557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8760020b125b806102fe57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186102f590612a30565b60020b8660020b135b15610335576040517f064847d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000856fffffffffffffffffffffffffffffffff1611610381576040517f1007454800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061039988876002610e969092919063ffffffff16565b905060006103b388886002610e969092919063ffffffff16565b905081156103d3576103d28960016003610f999092919063ffffffff16565b5b80156103f1576103f08860016003610f999092919063ffffffff16565b5b600061040b8b8b8b6004611009909392919063ffffffff16565b9050610420888261105190919063ffffffff16565b61044c61043d6000800160149054906101000a900460020b6110c7565b6104468b6110c7565b8a611594565b945061047a61046b6000800160149054906101000a900460020b6110c7565b6104748c6110c7565b8a61167b565b93507fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b1436785856040516104ad929190612756565b60405180910390a187600160008282829054906101000a90046fffffffffffffffffffffffffffffffff166104e29190612a78565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600080600087111561052f5761052c611710565b91505b6000861115610543576105406117b1565b90505b3373ffffffffffffffffffffffffffffffffffffffff1663d348799788888c8c6040518563ffffffff1660e01b81526004016105829493929190612b1a565b600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050506000871180156105d557506105c7611710565b87836105d39190612b5a565b115b1561062b5786826105e4611710565b6105ee9190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610622929190612c1f565b60405180910390fd5b60008611801561064c575061063e6117b1565b868261064a9190612b5a565b115b156106a257858161065b6117b1565b6106659190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610699929190612ca7565b60405180910390fd5b8a60020b8c60020b8e73ffffffffffffffffffffffffffffffffffffffff167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde338e8c8c6040516106f69493929190612ce3565b60405180910390a45050505050965096945050505050565b60036020528060005260406000206000915090505481565b600080600062014cc0905060006c46bd046408013d67ed5d406b2d90507fffffffffffffffffffffffffffffffffffffffffffffffffffe22b3b9e50c0f49350680246ddf9797668000092506000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b815250509050600060405180608001604052808a815260200160008152602001836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015160020b81525090505b6000816000015111156109da5761085261245c565b8160400151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108ab826060015160018d6003611852909392919063ffffffff16565b50816020018160020b60020b815250506108c881602001516110c7565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061093581600001518260400151600160009054906101000a90046fffffffffffffffffffffffffffffffff168560000151611a40565b84604001846060018560800183815250838152508373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505050508060600151826000018181516109929190612b8e565b915081815250508060800151826020018181516109af9190612b5a565b915081815250506109c38260400151611abb565b826060019060020b908160020b815250505061083d565b89610a025780602001516109ed90612d28565b81600001518a6109fd9190612b8e565b610a21565b806000015189610a129190612b8e565b8160200151610a2090612d28565b5b80965081975050508915610bc5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c87610a7690612d28565b6040518363ffffffff1660e01b8152600401610a93929190612d70565b6020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190612dae565b506000610ae1611710565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3388888c8c6040518563ffffffff1660e01b8152600401610b229493929190612ddb565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b50505050610b5c611710565b8782610b689190612b5a565b1115610bbf578681610b78611710565b610b829190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610bb6929190612c1f565b60405180910390fd5b50610d57565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c88610c0c90612d28565b6040518363ffffffff1660e01b8152600401610c29929190612d70565b6020604051808303816000875af1158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190612dae565b506000610c776117b1565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3388888c8c6040518563ffffffff1660e01b8152600401610cb89493929190612ddb565b600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b50505050610cf26117b1565b8682610cfe9190612b5a565b1115610d55578581610d0e6117b1565b610d189190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610d4c929190612ca7565b60405180910390fd5b505b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca6788886000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a90046fffffffffffffffffffffffffffffffff166000800160149054906101000a900460020b604051610e0f959493929190612e1b565b60405180910390a3505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046fffffffffffffffffffffffffffffffff16905082565b6000808460008560020b60020b8152602001908152602001600020905060008160000160019054906101000a90046fffffffffffffffffffffffffffffffff16905060008482610ee69190612a78565b90506000826fffffffffffffffffffffffffffffffff1603610f205760018360000160006101000a81548160ff0219169083151502179055505b808360000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000826fffffffffffffffffffffffffffffffff161415156000826fffffffffffffffffffffffffffffffff16141515141593505050509392505050565b60008183610fa79190612e9d565b60020b14610fb457600080fd5b600080610fcb8385610fc69190612ece565b611eba565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b600084600085858560405160200161102393929190612fb6565b6040516020818303038152906040528051906020012081526020019081526020016000209050949350505050565b60008260000160009054906101000a90046fffffffffffffffffffffffffffffffff169050600082826110849190612a78565b9050808460000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b60008060008360020b126110de578260020b6110ec565b8260020b6110eb90612d28565b5b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761861111890612a30565b62ffffff1681111561115f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111569061303f565b60405180910390fd5b600080600183160361118257700100000000000000000000000000000000611194565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600060028316146111d75760806ffff97272373d413259a46990580e213a826111d2919061305f565b901c90505b600060048316146112055760806ffff2e50f5f656932ef12357cf3c7fdcc82611200919061305f565b901c90505b600060088316146112335760806fffe5caca7e10e4e61c3624eaa0941cd08261122e919061305f565b901c90505b600060108316146112615760806fffcb9843d60f6159c9db58835c9266448261125c919061305f565b901c90505b6000602083161461128f5760806fff973b41fa98c081472e6896dfb254c08261128a919061305f565b901c90505b600060408316146112bd5760806fff2ea16466c96a3843ec78b326b52861826112b8919061305f565b901c90505b600060808316146112eb5760806ffe5dee046a99a2a811c461f1969c3053826112e6919061305f565b901c90505b600061010083161461131a5760806ffcbe86c7900a88aedcffc83b479aa3a482611315919061305f565b901c90505b60006102008316146113495760806ff987a7253ac413176f2b074cf7815e5482611344919061305f565b901c90505b60006104008316146113785760806ff3392b0822b70005940c7a398e4b70f382611373919061305f565b901c90505b60006108008316146113a75760806fe7159475a2c29b7443b29c7fa6e889d9826113a2919061305f565b901c90505b60006110008316146113d65760806fd097f3bdfd2022b8845ad8f792aa5825826113d1919061305f565b901c90505b60006120008316146114055760806fa9f746462d870fdf8a65dc1f90e061e582611400919061305f565b901c90505b60006140008316146114345760806f70d869a156d2a1b890bb3df62baf32f78261142f919061305f565b901c90505b60006180008316146114635760806f31be135f97d08fd981231505542fcfa68261145e919061305f565b901c90505b6000620100008316146114935760806f09aa508b5b7a84e1c677de54f3e99bc98261148e919061305f565b901c90505b6000620200008316146114c25760806e5d6af8dedb81196699c329225ee604826114bd919061305f565b901c90505b6000620400008316146114f05760806d2216e584f5fa1ea926041bedfe98826114eb919061305f565b901c90505b60006208000083161461151c5760806b048a170391f7dc42444e8fa282611517919061305f565b901c90505b60008460020b131561155757807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61155491906130a1565b90505b60006401000000008261156a91906130d2565b14611576576001611579565b60005b60ff16602082901c61158b9190612b5a565b92505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156115d557828480945081955050505b60008473ffffffffffffffffffffffffffffffffffffffff16116115f857600080fd5b611672611656606060ff16846fffffffffffffffffffffffffffffffff16901b86866116249190613103565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16611edc565b8573ffffffffffffffffffffffffffffffffffffffff16611f47565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156116bc57828480945081955050505b611707826fffffffffffffffffffffffffffffffff1685856116de9190613103565b73ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000611edc565b90509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161176b91906124fb565b602060405180830381865afa158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac9190613160565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180c91906124fb565b602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190613160565b905090565b600080600084866118639190612ece565b905060008660020b1280156118875750600085876118819190612e9d565b60020b14155b1561189b5780806118979061318d565b9150505b831561195e576000806118ad83611eba565b9150915060008160ff166001901b60018360ff166001901b6118cf9190612b8e565b6118d99190612b5a565b90506000818b60008660010b60010b815260200190815260200160002054169050600081141595508561192557888360ff168661191691906131d5565b6119209190613230565b611953565b8861192f82611f5a565b8461193a919061327a565b60ff168661194891906131d5565b6119529190613230565b5b965050505050611a36565b60008061197660018461197191906132af565b611eba565b91509150600060018260ff166001901b6119909190612b8e565b1990506000818b60008660010b60010b81526020019081526020016000205416905060008114159550856119f557888360ff6119cc919061327a565b60ff166001876119dc91906132af565b6119e691906132af565b6119f09190613230565b611a2f565b8883611a008361207d565b611a0a919061327a565b60ff16600187611a1a91906132af565b611a2491906132af565b611a2e9190613230565b5b9650505050505b5094509492505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610159050611a84888787846121ec565b9350611a91888588611594565b9250611a9e88858861167b565b915080611ab057818380935081945050505b509450945094915050565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1610158015611b3d575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16105b611b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7390613356565b60405180910390fd5b600060208373ffffffffffffffffffffffffffffffffffffffff16901b9050600081905060006fffffffffffffffffffffffffffffffff821160071b808217915082811c92505067ffffffffffffffff821160061b808217915082811c92505063ffffffff821160051b808217915082811c92505061ffff821160041b808217915082811c92505060ff821160031b808217915082811c925050600f821160021b808217915082811c9250506003821160011b808217915082811c9250506001821180821791505060808110611c6357607f81611c599190612b8e565b83901c9150611c76565b80607f611c709190612b8e565b83901b91505b60006040608083611c879190613376565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b82179150506000693627a301d71055774c8582611e0a91906133b9565b9050600060806f028f6481ab7f045a5af012a19d003aaa83611e2c9190613376565b901d9050600060806fdb2df09e81959a81455e260799a0632f84611e509190613431565b901d90508060020b8260020b14611eaa578873ffffffffffffffffffffffffffffffffffffffff16611e81826110c7565b73ffffffffffffffffffffffffffffffffffffffff161115611ea35781611ea5565b805b611eac565b815b975050505050505050919050565b60008060088360020b901d915061010083611ed59190612e9d565b9050915091565b6000611ee9848484612219565b905060008280611efc57611efb612e6e565b5b8486091115611f40577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611f3157600080fd5b8080611f3c90613475565b9150505b9392505050565b6000808284061182840401905092915050565b6000808211611f6857600080fd5b7001000000000000000000000000000000008210611f9757608082901c9150608081611f9491906134bd565b90505b680100000000000000008210611fbe57604082901c9150604081611fbb91906134bd565b90505b6401000000008210611fe157602082901c9150602081611fde91906134bd565b90505b62010000821061200257601082901c9150601081611fff91906134bd565b90505b610100821061202257600882901c915060088161201f91906134bd565b90505b6010821061204157600482901c915060048161203e91906134bd565b90505b6004821061206057600282901c915060028161205d91906134bd565b90505b600282106120785760018161207591906134bd565b90505b919050565b600080821161208b57600080fd5b60ff905060006fffffffffffffffffffffffffffffffff8016831611156120c0576080816120b9919061327a565b90506120c8565b608082901c91505b600067ffffffffffffffff8016831611156120f1576040816120ea919061327a565b90506120f9565b604082901c91505b600063ffffffff80168316111561211e57602081612117919061327a565b9050612126565b602082901c91505b600061ffff80168316111561214957601081612142919061327a565b9050612151565b601082901c91505b600060ff8016831611156121735760088161216c919061327a565b905061217b565b600882901c91505b6000600f8316111561219b57600481612194919061327a565b90506121a3565b600482901c91505b60006003831611156121c3576002816121bc919061327a565b90506121cb565b600282901c91505b60006001831611156121e7576001816121e4919061327a565b90505b919050565b600081612203576121fe85858561232e565b61220f565b61220e858585612369565b5b9050949350505050565b60008060008019858709858702925082811083820303915050600081036122545783828161224a57612249612e6e565b5b0492505050612327565b83811061229a5780846040517f773cc18c000000000000000000000000000000000000000000000000000000008152600401612291929190612756565b60405180910390fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000826fffffffffffffffffffffffffffffffff16606060ff1683901b61235591906130a1565b8461236091906134f2565b90509392505050565b600080606060ff16846fffffffffffffffffffffffffffffffff16901b905060008573ffffffffffffffffffffffffffffffffffffffff16846123ac919061305f565b90508573ffffffffffffffffffffffffffffffffffffffff1684826123d191906130a1565b0361241a57600081836123e49190612b5a565b90508281106124185761240e838873ffffffffffffffffffffffffffffffffffffffff1683611edc565b9350505050612455565b505b61245082858873ffffffffffffffffffffffffffffffffffffffff168561244191906130a1565b61244b9190612b5a565b611f47565b925050505b9392505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060020b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e5826124ba565b9050919050565b6124f5816124da565b82525050565b600060208201905061251060008301846124ec565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61253b81612516565b82525050565b60006020820190506125566000830184612532565b92915050565b612565816124ba565b82525050565b60008160020b9050919050565b6125818161256b565b82525050565b600060408201905061259c600083018561255c565b6125a96020830184612578565b9392505050565b600080fd5b600080fd5b6125c3816124da565b81146125ce57600080fd5b50565b6000813590506125e0816125ba565b92915050565b6125ef8161256b565b81146125fa57600080fd5b50565b60008135905061260c816125e6565b92915050565b61261b81612516565b811461262657600080fd5b50565b60008135905061263881612612565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126126635761266261263e565b5b8235905067ffffffffffffffff8111156126805761267f612643565b5b60208301915083600182028301111561269c5761269b612648565b5b9250929050565b60008060008060008060a087890312156126c0576126bf6125b0565b5b60006126ce89828a016125d1565b96505060206126df89828a016125fd565b95505060406126f089828a016125fd565b945050606061270189828a01612629565b935050608087013567ffffffffffffffff811115612722576127216125b5565b5b61272e89828a0161264d565b92509250509295509295509295565b6000819050919050565b6127508161273d565b82525050565b600060408201905061276b6000830185612747565b6127786020830184612747565b9392505050565b60008160010b9050919050565b6127958161277f565b81146127a057600080fd5b50565b6000813590506127b28161278c565b92915050565b6000602082840312156127ce576127cd6125b0565b5b60006127dc848285016127a3565b91505092915050565b60006020820190506127fa6000830184612747565b92915050565b60008115159050919050565b61281581612800565b811461282057600080fd5b50565b6000813590506128328161280c565b92915050565b6128418161273d565b811461284c57600080fd5b50565b60008135905061285e81612838565b92915050565b6000806000806000608086880312156128805761287f6125b0565b5b600061288e888289016125d1565b955050602061289f88828901612823565b94505060406128b08882890161284f565b935050606086013567ffffffffffffffff8111156128d1576128d06125b5565b5b6128dd8882890161264d565b92509250509295509295909350565b6000819050919050565b6128ff816128ec565b82525050565b600060408201905061291a60008301856128f6565b61292760208301846128f6565b9392505050565b600060208284031215612944576129436125b0565b5b6000612952848285016125fd565b91505092915050565b61296481612800565b82525050565b600060408201905061297f600083018561295b565b61298c6020830184612532565b9392505050565b6000819050919050565b6000819050919050565b60006129c26129bd6129b884612993565b61299d565b61273d565b9050919050565b6129d2816129a7565b82525050565b60006040820190506129ed60008301856129c9565b6129fa60208301846129c9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3b8261256b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203612a6d57612a6c612a01565b5b816000039050919050565b6000612a8382612516565b9150612a8e83612516565b925082820190506fffffffffffffffffffffffffffffffff811115612ab657612ab5612a01565b5b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612af98385612abc565b9350612b06838584612acd565b612b0f83612adc565b840190509392505050565b6000606082019050612b2f6000830187612747565b612b3c6020830186612747565b8181036040830152612b4f818486612aed565b905095945050505050565b6000612b658261273d565b9150612b708361273d565b9250828201905080821115612b8857612b87612a01565b5b92915050565b6000612b998261273d565b9150612ba48361273d565b9250828203905081811115612bbc57612bbb612a01565b5b92915050565b600082825260208201905092915050565b7f746f6b656e300000000000000000000000000000000000000000000000000000600082015250565b6000612c09600683612bc2565b9150612c1482612bd3565b602082019050919050565b60006060820190508181036000830152612c3881612bfc565b9050612c476020830185612747565b612c546040830184612747565b9392505050565b7f746f6b656e310000000000000000000000000000000000000000000000000000600082015250565b6000612c91600683612bc2565b9150612c9c82612c5b565b602082019050919050565b60006060820190508181036000830152612cc081612c84565b9050612ccf6020830185612747565b612cdc6040830184612747565b9392505050565b6000608082019050612cf860008301876124ec565b612d056020830186612532565b612d126040830185612747565b612d1f6060830184612747565b95945050505050565b6000612d33826128ec565b91507f80000000000000000000000000000000000000000000000000000000000000008203612d6557612d64612a01565b5b816000039050919050565b6000604082019050612d8560008301856124ec565b612d926020830184612747565b9392505050565b600081519050612da88161280c565b92915050565b600060208284031215612dc457612dc36125b0565b5b6000612dd284828501612d99565b91505092915050565b6000606082019050612df060008301876128f6565b612dfd60208301866128f6565b8181036040830152612e10818486612aed565b905095945050505050565b600060a082019050612e3060008301886128f6565b612e3d60208301876128f6565b612e4a604083018661255c565b612e576060830185612532565b612e646080830184612578565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ea88261256b565b9150612eb38361256b565b925082612ec357612ec2612e6e565b5b828207905092915050565b6000612ed98261256b565b9150612ee48361256b565b925082612ef457612ef3612e6e565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615612f2d57612f2c612a01565b5b828205905092915050565b60008160601b9050919050565b6000612f5082612f38565b9050919050565b6000612f6282612f45565b9050919050565b612f7a612f75826124da565b612f57565b82525050565b60008160e81b9050919050565b6000612f9882612f80565b9050919050565b612fb0612fab8261256b565b612f8d565b82525050565b6000612fc28286612f69565b601482019150612fd28285612f9f565b600382019150612fe28284612f9f565b600382019150819050949350505050565b7f5400000000000000000000000000000000000000000000000000000000000000600082015250565b6000613029600183612bc2565b915061303482612ff3565b602082019050919050565b600060208201905081810360008301526130588161301c565b9050919050565b600061306a8261273d565b91506130758361273d565b92508282026130838161273d565b9150828204841483151761309a57613099612a01565b5b5092915050565b60006130ac8261273d565b91506130b78361273d565b9250826130c7576130c6612e6e565b5b828204905092915050565b60006130dd8261273d565b91506130e88361273d565b9250826130f8576130f7612e6e565b5b828206905092915050565b600061310e826124ba565b9150613119836124ba565b9250828203905073ffffffffffffffffffffffffffffffffffffffff81111561314557613144612a01565b5b92915050565b60008151905061315a81612838565b92915050565b600060208284031215613176576131756125b0565b5b60006131848482850161314b565b91505092915050565b60006131988261256b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082036131ca576131c9612a01565b5b600182039050919050565b60006131e08261256b565b91506131eb8361256b565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212171561322a57613229612a01565b5b92915050565b600061323b8261256b565b91506132468361256b565b92508282026132548161256b565b915080821461326657613265612a01565b5b5092915050565b600060ff82169050919050565b60006132858261326d565b91506132908361326d565b9250828203905060ff8111156132a9576132a8612a01565b5b92915050565b60006132ba8261256b565b91506132c58361256b565b925082820190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561330457613303612a01565b5b92915050565b7f5200000000000000000000000000000000000000000000000000000000000000600082015250565b6000613340600183612bc2565b915061334b8261330a565b602082019050919050565b6000602082019050818103600083015261336f81613333565b9050919050565b6000613381826128ec565b915061338c836128ec565b92508282039050818112600084121682821360008512151617156133b3576133b2612a01565b5b92915050565b60006133c4826128ec565b91506133cf836128ec565b92508282026133dd816128ec565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561341557613414612a01565b5b828205841483151761342a57613429612a01565b5b5092915050565b600061343c826128ec565b9150613447836128ec565b92508282019050828112156000831216838212600084121516171561346f5761346e612a01565b5b92915050565b60006134808261273d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134b2576134b1612a01565b5b600182019050919050565b60006134c88261326d565b91506134d38361326d565b9250828201905060ff8111156134ec576134eb612a01565b5b92915050565b60006134fd826124ba565b9150613508836124ba565b9250828201905073ffffffffffffffffffffffffffffffffffffffff81111561353457613533612a01565b5b9291505056fea26469706673582212200237a7a6648a9e483ae2909cd1f685857473b62bd40283fe896765e751a5a15164736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635339c2961161005b5780635339c2961461011957806380c2c6ef14610149578063d21220a71461017a578063f30dba931461019857610088565b80630dfe16811461008d5780631a686502146100ab5780633850c7bd146100c95780633c8a7d8d146100e8575b600080fd5b6100956101c9565b6040516100a291906124fb565b60405180910390f35b6100b36101ed565b6040516100c09190612541565b60405180910390f35b6100d161020f565b6040516100df929190612587565b60405180910390f35b61010260048036038101906100fd91906126a3565b61024e565b604051610110929190612756565b60405180910390f35b610133600480360381019061012e91906127b8565b61070e565b60405161014091906127e5565b60405180910390f35b610163600480360381019061015e9190612864565b610726565b604051610171929190612905565b60405180910390f35b610182610e25565b60405161018f91906124fb565b60405180910390f35b6101b260048036038101906101ad919061292e565b610e49565b6040516101c092919061296a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460020b905082565b6000807fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b143676000806040516102839291906129d8565b60405180910390a18560020b8760020b1215806102c557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8760020b125b806102fe57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186102f590612a30565b60020b8660020b135b15610335576040517f064847d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000856fffffffffffffffffffffffffffffffff1611610381576040517f1007454800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061039988876002610e969092919063ffffffff16565b905060006103b388886002610e969092919063ffffffff16565b905081156103d3576103d28960016003610f999092919063ffffffff16565b5b80156103f1576103f08860016003610f999092919063ffffffff16565b5b600061040b8b8b8b6004611009909392919063ffffffff16565b9050610420888261105190919063ffffffff16565b61044c61043d6000800160149054906101000a900460020b6110c7565b6104468b6110c7565b8a611594565b945061047a61046b6000800160149054906101000a900460020b6110c7565b6104748c6110c7565b8a61167b565b93507fbd0faddf87043dd749c1b9d4dca8a12589b8cb5e2106832111ce23f219b1436785856040516104ad929190612756565b60405180910390a187600160008282829054906101000a90046fffffffffffffffffffffffffffffffff166104e29190612a78565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600080600087111561052f5761052c611710565b91505b6000861115610543576105406117b1565b90505b3373ffffffffffffffffffffffffffffffffffffffff1663d348799788888c8c6040518563ffffffff1660e01b81526004016105829493929190612b1a565b600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050506000871180156105d557506105c7611710565b87836105d39190612b5a565b115b1561062b5786826105e4611710565b6105ee9190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610622929190612c1f565b60405180910390fd5b60008611801561064c575061063e6117b1565b868261064a9190612b5a565b115b156106a257858161065b6117b1565b6106659190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610699929190612ca7565b60405180910390fd5b8a60020b8c60020b8e73ffffffffffffffffffffffffffffffffffffffff167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde338e8c8c6040516106f69493929190612ce3565b60405180910390a45050505050965096945050505050565b60036020528060005260406000206000915090505481565b600080600062014cc0905060006c46bd046408013d67ed5d406b2d90507fffffffffffffffffffffffffffffffffffffffffffffffffffe22b3b9e50c0f49350680246ddf9797668000092506000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b815250509050600060405180608001604052808a815260200160008152602001836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015160020b81525090505b6000816000015111156109da5761085261245c565b8160400151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108ab826060015160018d6003611852909392919063ffffffff16565b50816020018160020b60020b815250506108c881602001516110c7565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061093581600001518260400151600160009054906101000a90046fffffffffffffffffffffffffffffffff168560000151611a40565b84604001846060018560800183815250838152508373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505050508060600151826000018181516109929190612b8e565b915081815250508060800151826020018181516109af9190612b5a565b915081815250506109c38260400151611abb565b826060019060020b908160020b815250505061083d565b89610a025780602001516109ed90612d28565b81600001518a6109fd9190612b8e565b610a21565b806000015189610a129190612b8e565b8160200151610a2090612d28565b5b80965081975050508915610bc5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c87610a7690612d28565b6040518363ffffffff1660e01b8152600401610a93929190612d70565b6020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190612dae565b506000610ae1611710565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3388888c8c6040518563ffffffff1660e01b8152600401610b229493929190612ddb565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b50505050610b5c611710565b8782610b689190612b5a565b1115610bbf578681610b78611710565b610b829190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610bb6929190612c1f565b60405180910390fd5b50610d57565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c88610c0c90612d28565b6040518363ffffffff1660e01b8152600401610c29929190612d70565b6020604051808303816000875af1158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c9190612dae565b506000610c776117b1565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3388888c8c6040518563ffffffff1660e01b8152600401610cb89493929190612ddb565b600060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b50505050610cf26117b1565b8682610cfe9190612b5a565b1115610d55578581610d0e6117b1565b610d189190612b8e565b6040517f3dc8dd93000000000000000000000000000000000000000000000000000000008152600401610d4c929190612ca7565b60405180910390fd5b505b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca6788886000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a90046fffffffffffffffffffffffffffffffff166000800160149054906101000a900460020b604051610e0f959493929190612e1b565b60405180910390a3505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046fffffffffffffffffffffffffffffffff16905082565b6000808460008560020b60020b8152602001908152602001600020905060008160000160019054906101000a90046fffffffffffffffffffffffffffffffff16905060008482610ee69190612a78565b90506000826fffffffffffffffffffffffffffffffff1603610f205760018360000160006101000a81548160ff0219169083151502179055505b808360000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000826fffffffffffffffffffffffffffffffff161415156000826fffffffffffffffffffffffffffffffff16141515141593505050509392505050565b60008183610fa79190612e9d565b60020b14610fb457600080fd5b600080610fcb8385610fc69190612ece565b611eba565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b600084600085858560405160200161102393929190612fb6565b6040516020818303038152906040528051906020012081526020019081526020016000209050949350505050565b60008260000160009054906101000a90046fffffffffffffffffffffffffffffffff169050600082826110849190612a78565b9050808460000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b60008060008360020b126110de578260020b6110ec565b8260020b6110eb90612d28565b5b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761861111890612a30565b62ffffff1681111561115f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111569061303f565b60405180910390fd5b600080600183160361118257700100000000000000000000000000000000611194565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600060028316146111d75760806ffff97272373d413259a46990580e213a826111d2919061305f565b901c90505b600060048316146112055760806ffff2e50f5f656932ef12357cf3c7fdcc82611200919061305f565b901c90505b600060088316146112335760806fffe5caca7e10e4e61c3624eaa0941cd08261122e919061305f565b901c90505b600060108316146112615760806fffcb9843d60f6159c9db58835c9266448261125c919061305f565b901c90505b6000602083161461128f5760806fff973b41fa98c081472e6896dfb254c08261128a919061305f565b901c90505b600060408316146112bd5760806fff2ea16466c96a3843ec78b326b52861826112b8919061305f565b901c90505b600060808316146112eb5760806ffe5dee046a99a2a811c461f1969c3053826112e6919061305f565b901c90505b600061010083161461131a5760806ffcbe86c7900a88aedcffc83b479aa3a482611315919061305f565b901c90505b60006102008316146113495760806ff987a7253ac413176f2b074cf7815e5482611344919061305f565b901c90505b60006104008316146113785760806ff3392b0822b70005940c7a398e4b70f382611373919061305f565b901c90505b60006108008316146113a75760806fe7159475a2c29b7443b29c7fa6e889d9826113a2919061305f565b901c90505b60006110008316146113d65760806fd097f3bdfd2022b8845ad8f792aa5825826113d1919061305f565b901c90505b60006120008316146114055760806fa9f746462d870fdf8a65dc1f90e061e582611400919061305f565b901c90505b60006140008316146114345760806f70d869a156d2a1b890bb3df62baf32f78261142f919061305f565b901c90505b60006180008316146114635760806f31be135f97d08fd981231505542fcfa68261145e919061305f565b901c90505b6000620100008316146114935760806f09aa508b5b7a84e1c677de54f3e99bc98261148e919061305f565b901c90505b6000620200008316146114c25760806e5d6af8dedb81196699c329225ee604826114bd919061305f565b901c90505b6000620400008316146114f05760806d2216e584f5fa1ea926041bedfe98826114eb919061305f565b901c90505b60006208000083161461151c5760806b048a170391f7dc42444e8fa282611517919061305f565b901c90505b60008460020b131561155757807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61155491906130a1565b90505b60006401000000008261156a91906130d2565b14611576576001611579565b60005b60ff16602082901c61158b9190612b5a565b92505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156115d557828480945081955050505b60008473ffffffffffffffffffffffffffffffffffffffff16116115f857600080fd5b611672611656606060ff16846fffffffffffffffffffffffffffffffff16901b86866116249190613103565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16611edc565b8573ffffffffffffffffffffffffffffffffffffffff16611f47565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1611156116bc57828480945081955050505b611707826fffffffffffffffffffffffffffffffff1685856116de9190613103565b73ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000611edc565b90509392505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161176b91906124fb565b602060405180830381865afa158015611788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ac9190613160565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180c91906124fb565b602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d9190613160565b905090565b600080600084866118639190612ece565b905060008660020b1280156118875750600085876118819190612e9d565b60020b14155b1561189b5780806118979061318d565b9150505b831561195e576000806118ad83611eba565b9150915060008160ff166001901b60018360ff166001901b6118cf9190612b8e565b6118d99190612b5a565b90506000818b60008660010b60010b815260200190815260200160002054169050600081141595508561192557888360ff168661191691906131d5565b6119209190613230565b611953565b8861192f82611f5a565b8461193a919061327a565b60ff168661194891906131d5565b6119529190613230565b5b965050505050611a36565b60008061197660018461197191906132af565b611eba565b91509150600060018260ff166001901b6119909190612b8e565b1990506000818b60008660010b60010b81526020019081526020016000205416905060008114159550856119f557888360ff6119cc919061327a565b60ff166001876119dc91906132af565b6119e691906132af565b6119f09190613230565b611a2f565b8883611a008361207d565b611a0a919061327a565b60ff16600187611a1a91906132af565b611a2491906132af565b611a2e9190613230565b5b9650505050505b5094509492505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610159050611a84888787846121ec565b9350611a91888588611594565b9250611a9e88858861167b565b915080611ab057818380935081945050505b509450945094915050565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1610158015611b3d575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16105b611b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7390613356565b60405180910390fd5b600060208373ffffffffffffffffffffffffffffffffffffffff16901b9050600081905060006fffffffffffffffffffffffffffffffff821160071b808217915082811c92505067ffffffffffffffff821160061b808217915082811c92505063ffffffff821160051b808217915082811c92505061ffff821160041b808217915082811c92505060ff821160031b808217915082811c925050600f821160021b808217915082811c9250506003821160011b808217915082811c9250506001821180821791505060808110611c6357607f81611c599190612b8e565b83901c9150611c76565b80607f611c709190612b8e565b83901b91505b60006040608083611c879190613376565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b82179150506000693627a301d71055774c8582611e0a91906133b9565b9050600060806f028f6481ab7f045a5af012a19d003aaa83611e2c9190613376565b901d9050600060806fdb2df09e81959a81455e260799a0632f84611e509190613431565b901d90508060020b8260020b14611eaa578873ffffffffffffffffffffffffffffffffffffffff16611e81826110c7565b73ffffffffffffffffffffffffffffffffffffffff161115611ea35781611ea5565b805b611eac565b815b975050505050505050919050565b60008060088360020b901d915061010083611ed59190612e9d565b9050915091565b6000611ee9848484612219565b905060008280611efc57611efb612e6e565b5b8486091115611f40577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110611f3157600080fd5b8080611f3c90613475565b9150505b9392505050565b6000808284061182840401905092915050565b6000808211611f6857600080fd5b7001000000000000000000000000000000008210611f9757608082901c9150608081611f9491906134bd565b90505b680100000000000000008210611fbe57604082901c9150604081611fbb91906134bd565b90505b6401000000008210611fe157602082901c9150602081611fde91906134bd565b90505b62010000821061200257601082901c9150601081611fff91906134bd565b90505b610100821061202257600882901c915060088161201f91906134bd565b90505b6010821061204157600482901c915060048161203e91906134bd565b90505b6004821061206057600282901c915060028161205d91906134bd565b90505b600282106120785760018161207591906134bd565b90505b919050565b600080821161208b57600080fd5b60ff905060006fffffffffffffffffffffffffffffffff8016831611156120c0576080816120b9919061327a565b90506120c8565b608082901c91505b600067ffffffffffffffff8016831611156120f1576040816120ea919061327a565b90506120f9565b604082901c91505b600063ffffffff80168316111561211e57602081612117919061327a565b9050612126565b602082901c91505b600061ffff80168316111561214957601081612142919061327a565b9050612151565b601082901c91505b600060ff8016831611156121735760088161216c919061327a565b905061217b565b600882901c91505b6000600f8316111561219b57600481612194919061327a565b90506121a3565b600482901c91505b60006003831611156121c3576002816121bc919061327a565b90506121cb565b600282901c91505b60006001831611156121e7576001816121e4919061327a565b90505b919050565b600081612203576121fe85858561232e565b61220f565b61220e858585612369565b5b9050949350505050565b60008060008019858709858702925082811083820303915050600081036122545783828161224a57612249612e6e565b5b0492505050612327565b83811061229a5780846040517f773cc18c000000000000000000000000000000000000000000000000000000008152600401612291929190612756565b60405180910390fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000826fffffffffffffffffffffffffffffffff16606060ff1683901b61235591906130a1565b8461236091906134f2565b90509392505050565b600080606060ff16846fffffffffffffffffffffffffffffffff16901b905060008573ffffffffffffffffffffffffffffffffffffffff16846123ac919061305f565b90508573ffffffffffffffffffffffffffffffffffffffff1684826123d191906130a1565b0361241a57600081836123e49190612b5a565b90508281106124185761240e838873ffffffffffffffffffffffffffffffffffffffff1683611edc565b9350505050612455565b505b61245082858873ffffffffffffffffffffffffffffffffffffffff168561244191906130a1565b61244b9190612b5a565b611f47565b925050505b9392505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060020b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e5826124ba565b9050919050565b6124f5816124da565b82525050565b600060208201905061251060008301846124ec565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61253b81612516565b82525050565b60006020820190506125566000830184612532565b92915050565b612565816124ba565b82525050565b60008160020b9050919050565b6125818161256b565b82525050565b600060408201905061259c600083018561255c565b6125a96020830184612578565b9392505050565b600080fd5b600080fd5b6125c3816124da565b81146125ce57600080fd5b50565b6000813590506125e0816125ba565b92915050565b6125ef8161256b565b81146125fa57600080fd5b50565b60008135905061260c816125e6565b92915050565b61261b81612516565b811461262657600080fd5b50565b60008135905061263881612612565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126126635761266261263e565b5b8235905067ffffffffffffffff8111156126805761267f612643565b5b60208301915083600182028301111561269c5761269b612648565b5b9250929050565b60008060008060008060a087890312156126c0576126bf6125b0565b5b60006126ce89828a016125d1565b96505060206126df89828a016125fd565b95505060406126f089828a016125fd565b945050606061270189828a01612629565b935050608087013567ffffffffffffffff811115612722576127216125b5565b5b61272e89828a0161264d565b92509250509295509295509295565b6000819050919050565b6127508161273d565b82525050565b600060408201905061276b6000830185612747565b6127786020830184612747565b9392505050565b60008160010b9050919050565b6127958161277f565b81146127a057600080fd5b50565b6000813590506127b28161278c565b92915050565b6000602082840312156127ce576127cd6125b0565b5b60006127dc848285016127a3565b91505092915050565b60006020820190506127fa6000830184612747565b92915050565b60008115159050919050565b61281581612800565b811461282057600080fd5b50565b6000813590506128328161280c565b92915050565b6128418161273d565b811461284c57600080fd5b50565b60008135905061285e81612838565b92915050565b6000806000806000608086880312156128805761287f6125b0565b5b600061288e888289016125d1565b955050602061289f88828901612823565b94505060406128b08882890161284f565b935050606086013567ffffffffffffffff8111156128d1576128d06125b5565b5b6128dd8882890161264d565b92509250509295509295909350565b6000819050919050565b6128ff816128ec565b82525050565b600060408201905061291a60008301856128f6565b61292760208301846128f6565b9392505050565b600060208284031215612944576129436125b0565b5b6000612952848285016125fd565b91505092915050565b61296481612800565b82525050565b600060408201905061297f600083018561295b565b61298c6020830184612532565b9392505050565b6000819050919050565b6000819050919050565b60006129c26129bd6129b884612993565b61299d565b61273d565b9050919050565b6129d2816129a7565b82525050565b60006040820190506129ed60008301856129c9565b6129fa60208301846129c9565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3b8261256b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203612a6d57612a6c612a01565b5b816000039050919050565b6000612a8382612516565b9150612a8e83612516565b925082820190506fffffffffffffffffffffffffffffffff811115612ab657612ab5612a01565b5b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612af98385612abc565b9350612b06838584612acd565b612b0f83612adc565b840190509392505050565b6000606082019050612b2f6000830187612747565b612b3c6020830186612747565b8181036040830152612b4f818486612aed565b905095945050505050565b6000612b658261273d565b9150612b708361273d565b9250828201905080821115612b8857612b87612a01565b5b92915050565b6000612b998261273d565b9150612ba48361273d565b9250828203905081811115612bbc57612bbb612a01565b5b92915050565b600082825260208201905092915050565b7f746f6b656e300000000000000000000000000000000000000000000000000000600082015250565b6000612c09600683612bc2565b9150612c1482612bd3565b602082019050919050565b60006060820190508181036000830152612c3881612bfc565b9050612c476020830185612747565b612c546040830184612747565b9392505050565b7f746f6b656e310000000000000000000000000000000000000000000000000000600082015250565b6000612c91600683612bc2565b9150612c9c82612c5b565b602082019050919050565b60006060820190508181036000830152612cc081612c84565b9050612ccf6020830185612747565b612cdc6040830184612747565b9392505050565b6000608082019050612cf860008301876124ec565b612d056020830186612532565b612d126040830185612747565b612d1f6060830184612747565b95945050505050565b6000612d33826128ec565b91507f80000000000000000000000000000000000000000000000000000000000000008203612d6557612d64612a01565b5b816000039050919050565b6000604082019050612d8560008301856124ec565b612d926020830184612747565b9392505050565b600081519050612da88161280c565b92915050565b600060208284031215612dc457612dc36125b0565b5b6000612dd284828501612d99565b91505092915050565b6000606082019050612df060008301876128f6565b612dfd60208301866128f6565b8181036040830152612e10818486612aed565b905095945050505050565b600060a082019050612e3060008301886128f6565b612e3d60208301876128f6565b612e4a604083018661255c565b612e576060830185612532565b612e646080830184612578565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ea88261256b565b9150612eb38361256b565b925082612ec357612ec2612e6e565b5b828207905092915050565b6000612ed98261256b565b9150612ee48361256b565b925082612ef457612ef3612e6e565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615612f2d57612f2c612a01565b5b828205905092915050565b60008160601b9050919050565b6000612f5082612f38565b9050919050565b6000612f6282612f45565b9050919050565b612f7a612f75826124da565b612f57565b82525050565b60008160e81b9050919050565b6000612f9882612f80565b9050919050565b612fb0612fab8261256b565b612f8d565b82525050565b6000612fc28286612f69565b601482019150612fd28285612f9f565b600382019150612fe28284612f9f565b600382019150819050949350505050565b7f5400000000000000000000000000000000000000000000000000000000000000600082015250565b6000613029600183612bc2565b915061303482612ff3565b602082019050919050565b600060208201905081810360008301526130588161301c565b9050919050565b600061306a8261273d565b91506130758361273d565b92508282026130838161273d565b9150828204841483151761309a57613099612a01565b5b5092915050565b60006130ac8261273d565b91506130b78361273d565b9250826130c7576130c6612e6e565b5b828204905092915050565b60006130dd8261273d565b91506130e88361273d565b9250826130f8576130f7612e6e565b5b828206905092915050565b600061310e826124ba565b9150613119836124ba565b9250828203905073ffffffffffffffffffffffffffffffffffffffff81111561314557613144612a01565b5b92915050565b60008151905061315a81612838565b92915050565b600060208284031215613176576131756125b0565b5b60006131848482850161314b565b91505092915050565b60006131988261256b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082036131ca576131c9612a01565b5b600182039050919050565b60006131e08261256b565b91506131eb8361256b565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212171561322a57613229612a01565b5b92915050565b600061323b8261256b565b91506132468361256b565b92508282026132548161256b565b915080821461326657613265612a01565b5b5092915050565b600060ff82169050919050565b60006132858261326d565b91506132908361326d565b9250828203905060ff8111156132a9576132a8612a01565b5b92915050565b60006132ba8261256b565b91506132c58361256b565b925082820190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561330457613303612a01565b5b92915050565b7f5200000000000000000000000000000000000000000000000000000000000000600082015250565b6000613340600183612bc2565b915061334b8261330a565b602082019050919050565b6000602082019050818103600083015261336f81613333565b9050919050565b6000613381826128ec565b915061338c836128ec565b92508282039050818112600084121682821360008512151617156133b3576133b2612a01565b5b92915050565b60006133c4826128ec565b91506133cf836128ec565b92508282026133dd816128ec565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561341557613414612a01565b5b828205841483151761342a57613429612a01565b5b5092915050565b600061343c826128ec565b9150613447836128ec565b92508282019050828112156000831216838212600084121516171561346f5761346e612a01565b5b92915050565b60006134808261273d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134b2576134b1612a01565b5b600182019050919050565b60006134c88261326d565b91506134d38361326d565b9250828201905060ff8111156134ec576134eb612a01565b5b92915050565b60006134fd826124ba565b9150613508836124ba565b9250828201905073ffffffffffffffffffffffffffffffffffffffff81111561353457613533612a01565b5b9291505056fea26469706673582212200237a7a6648a9e483ae2909cd1f685857473b62bd40283fe896765e751a5a15164736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swap(address,bool,uint256,bytes)": {
        "params": {
          "amountSpecified": "用户希望卖出的 token 数量",
          "zeroForOne": "用来控制交易方向的 flag：当设置为 true，是用 token0 兑换 token1；false 则相反。例如，如果 token0 是ETH，token1 是USDC，将 zeroForOne 设置为 true 意味着用 ETH 购买 USDC"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 382,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "slot0",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Slot0)379_storage"
      },
      {
        "astId": 384,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "liquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 389,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "ticks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_int24,t_struct(Info)1703_storage)"
      },
      {
        "astId": 393,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "tickBitmap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_int16,t_uint256)"
      },
      {
        "astId": 398,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "positions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Info)1570_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_bytes32,t_struct(Info)1570_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)1570_storage"
      },
      "t_mapping(t_int16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_int16",
        "label": "mapping(int16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int24,t_struct(Info)1703_storage)": {
        "encoding": "mapping",
        "key": "t_int24",
        "label": "mapping(int24 => struct Tick.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)1703_storage"
      },
      "t_struct(Info)1570_storage": {
        "encoding": "inplace",
        "label": "struct Position.Info",
        "members": [
          {
            "astId": 1569,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "liquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Info)1703_storage": {
        "encoding": "inplace",
        "label": "struct Tick.Info",
        "members": [
          {
            "astId": 1700,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1702,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "liquidity",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Slot0)379_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV3Pool.Slot0",
        "members": [
          {
            "astId": 376,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "sqrtPriceX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 378,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "tick",
            "offset": 20,
            "slot": "0",
            "type": "t_int24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}