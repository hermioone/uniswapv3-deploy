{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPriceLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTickRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroLiquidity",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slot0",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountSpecified",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int16",
          "name": "",
          "type": "int16"
        }
      ],
      "name": "tickBitmap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "name": "ticks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "liquidityGross",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "liquidityNet",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87c98661a5702b19e42a443d6cbd5e692b4ddc60c0ea7d4ef1b8a332d6566b9e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3296394",
    "logsBloom": "0x
    "blockHash": "0xc3e90235ac219ffe040d6fba37bd8bfca440af8b3569c8013d2788ebbadadffb",
    "transactionHash": "0x87c98661a5702b19e42a443d6cbd5e692b4ddc60c0ea7d4ef1b8a332d6566b9e",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3296394",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "5602277097478614198912276234240",
    85176
  ],
  "numDeployments": 1,
  "solcInputHash": "180c05407a83f7d74e669d548ac5e188",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTickRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLiquidity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(address,bool,uint256,uint160,bytes)\":{\"params\":{\"amountSpecified\":\"\\u7528\\u6237\\u5e0c\\u671b\\u5356\\u51fa\\u7684 token \\u6570\\u91cf\",\"sqrtPriceLimitX96\":\"\\u6ed1\\u70b9\\u4fdd\\u62a4\\uff0c\\u5f53 zeroForOne \\u4e3a true \\u65f6\\uff0c\\u4ea4\\u6613\\u7684\\u4ef7\\u683c\\u4e0d\\u80fd\\u4f4e\\u4e8e sqrtPriceLimitX96\\uff1b\\u5f53 zeroForOne \\u4e3a false \\u65f6\\uff0c\\u4ea4\\u6613\\u7684\\u4ef7\\u683c\\u4e0d\\u80fd\\u9ad8\\u4e8e sqrtPriceLimitX96\",\"zeroForOne\":\"\\u7528\\u6765\\u63a7\\u5236\\u4ea4\\u6613\\u65b9\\u5411\\u7684 flag\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a true\\uff0c\\u662f\\u7528 token0 \\u5151\\u6362 token1\\uff1bfalse \\u5219\\u76f8\\u53cd\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c token0 \\u662fETH\\uff0ctoken1 \\u662fUSDC\\uff0c\\u5c06 zeroForOne \\u8bbe\\u7f6e\\u4e3a true \\u610f\\u5473\\u7740\\u7528 ETH \\u8d2d\\u4e70 USDC\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Pool.sol\":\"UniswapV3Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/UniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/Position.sol\\\";\\nimport \\\"./lib/Tick.sol\\\";\\nimport \\\"./lib/TickBitMap.sol\\\";\\nimport \\\"./lib/Math.sol\\\";\\nimport \\\"./lib/TickMath.sol\\\";\\nimport \\\"./lib/SwapMath.sol\\\";\\nimport \\\"./lib/LiquidityMath.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3Pool.sol\\\";\\n\\ncontract UniswapV3Pool is IUniswapV3Pool {\\n    error InvalidTickRange();\\n    error ZeroLiquidity();\\n    error InsufficientInputAmount();\\n    error NotEnoughLiquidity();\\n    error InvalidPriceLimit();\\n\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    event Log(uint256 amount0, uint256 amount1);\\n\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    int24 internal constant MIN_TICK = -887272;\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    // \\u5f53\\u524d swap \\u7684\\u72b6\\u6001\\n    struct SwapState {\\n        // \\u5f85\\u4ea4\\u6362\\u7684 tokenIn \\u7684\\u91d1\\u989d\\n        uint256 amountSpecifiedRemaining;\\n        // \\u5df2\\u4ea4\\u6362\\u7684 tokenOut \\u7684\\u91d1\\u989d\\n        uint256 amountCalculated;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684 tick\\n        int24 tick;\\n        uint128 liquidity;\\n    }\\n\\n    // \\u7ef4\\u62a4\\u5f53\\u524d\\u4ea4\\u6613\\u201d\\u4e00\\u6b65\\u201c\\u7684\\u72b6\\u6001\\n    struct StepState {\\n        // \\u5faa\\u73af\\u5f00\\u59cb\\u65f6\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceStartX96;\\n        // \\u80fd\\u591f\\u4e3a\\u4ea4\\u6613\\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\u7684\\u4e0b\\u4e00\\u4e2a\\u5df2\\u521d\\u59cb\\u5316\\u7684tick\\n        int24 nextTick;\\n        // \\u4e0b\\u4e00\\u4e2a tick \\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceNextX96;\\n        // amountIn \\u548c amountOut \\u662f\\u5f53\\u524d\\u5faa\\u73af\\u4e2d\\u6d41\\u52a8\\u6027\\u80fd\\u591f\\u63d0\\u4f9b\\u7684\\u6570\\u91cf\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        bool initialized;\\n    }\\n\\n    struct Slot0 {\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d tick\\n        int24 tick;\\n    }\\n    Slot0 public slot0;\\n\\n    // \\u603b\\u7684\\u6d41\\u52a8\\u6027\\n    uint128 public liquidity;\\n\\n    mapping(int24 => Tick.Info) public ticks;\\n    // tick \\u7684\\u4f4d\\u56fe\\uff0ctick\\u662f int24\\uff0824bit\\u7684int\\uff09\\uff0ctick\\u7684\\u524d16\\u4f4d\\u662f key\\uff0c\\u7528\\u4e8e\\u4ece map \\u4e2d\\u627e\\u5230\\u5bf9\\u5e94\\u7684 value\\uff08\\u4f4d\\u56fe\\uff09\\n    // tick\\u7684\\u540e8\\u4f4d\\u662f\\u4f4d\\u56fe\\u7684key\\uff0c2 ** 8 \\u7684\\u8303\\u56f4\\u4e3a [0, 255]\\uff0c\\u8868\\u793a value \\u4e2d\\u54ea\\u4e00\\u4e2a\\u4f4d\\n    mapping(int16 => uint256) public tickBitmap;\\n    mapping(bytes32 => Position.Info) positions;\\n\\n    constructor(\\n        address token0_,\\n        address token1_,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    ) {\\n        token0 = token0_;\\n        token1 = token1_;\\n\\n        slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick});\\n    }\\n\\n    // \\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external override returns (uint256 amount0, uint256 amount1) {\\n        if (lowerTick >= upperTick || lowerTick < TickMath.MIN_TICK || upperTick > TickMath.MAX_TICK) {\\n            revert InvalidTickRange();\\n        } \\n        if (amount <= 0) {\\n            revert ZeroLiquidity();\\n        }\\n\\n        bool flippedLower = ticks.update(lowerTick, int128(amount), false);\\n        bool flippedUpper = ticks.update(upperTick, int128(amount), true);\\n\\n\\n        if (flippedLower) {\\n            tickBitmap.flipTick(lowerTick, 1);\\n        }\\n\\n        if (flippedUpper) {\\n            tickBitmap.flipTick(upperTick, 1);\\n        }\\n\\n        Position.Info storage position = positions.get(owner, lowerTick, upperTick);\\n        position.update(amount);\\n\\n        Slot0 memory slot0_ = slot0;\\n\\n        if (slot0_.tick < lowerTick) {\\n            // \\u4ef7\\u683c\\u533a\\u95f4\\u5728\\u5f53\\u524d tick \\u53f3\\u8fb9\\uff0c\\u6b64\\u65f6\\u63d0\\u4f9b\\u7684\\u6d41\\u52a8\\u6027\\u5e94\\u5168\\u90e8\\u7531 token0 \\u63d0\\u4f9b\\n            amount0 = Math.calcAmount0Delta(\\n                TickMath.getSqrtRatioAtTick(lowerTick),\\n                TickMath.getSqrtRatioAtTick(upperTick),\\n                amount\\n            );\\n        } else if (slot0_.tick < upperTick) {\\n            // \\u4ef7\\u683c\\u533a\\u95f4\\u5305\\u542b\\u5f53\\u524d tick\\n            amount0 = Math.calcAmount0Delta(\\n                slot0_.sqrtPriceX96,\\n                TickMath.getSqrtRatioAtTick(upperTick),\\n                amount\\n            );\\n\\n            amount1 = Math.calcAmount1Delta(\\n                slot0_.sqrtPriceX96,\\n                TickMath.getSqrtRatioAtTick(lowerTick),\\n                amount\\n            );\\n\\n            liquidity = LiquidityMath.addLiquidity(liquidity, int128(amount));\\n        } else {\\n            // \\u4ef7\\u683c\\u533a\\u95f4\\u5728\\u5f53\\u524d tick \\u5de6\\u8fb9\\uff0c\\u6b64\\u65f6\\u63d0\\u4f9b\\u7684\\u6d41\\u52a8\\u6027\\u5e94\\u5168\\u90e8\\u7531 token1 \\u63d0\\u4f9b\\n            amount1 = Math.calcAmount1Delta(\\n                TickMath.getSqrtRatioAtTick(lowerTick),\\n                TickMath.getSqrtRatioAtTick(upperTick),\\n                amount\\n            );\\n        }\\n\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) {\\n            balance0Before = balance0();\\n        }\\n        if (amount1 > 0) {\\n            balance1Before = balance1();\\n        }\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0 && balance0Before + amount0 > balance0()) {\\n            revert InsufficientInputAmount();\\n        }\\n        if (amount1 > 0 && balance1Before + amount1 > balance1()) {\\n            revert InsufficientInputAmount();\\n        }\\n        emit Mint(msg.sender, owner, lowerTick, upperTick, amount, amount0, amount1);\\n    }\\n\\n    /// @param zeroForOne \\u7528\\u6765\\u63a7\\u5236\\u4ea4\\u6613\\u65b9\\u5411\\u7684 flag\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a true\\uff0c\\u662f\\u7528 token0 \\u5151\\u6362 token1\\uff1bfalse \\u5219\\u76f8\\u53cd\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c token0 \\u662fETH\\uff0ctoken1 \\u662fUSDC\\uff0c\\u5c06 zeroForOne \\u8bbe\\u7f6e\\u4e3a true \\u610f\\u5473\\u7740\\u7528 ETH \\u8d2d\\u4e70 USDC\\n    /// @param amountSpecified \\u7528\\u6237\\u5e0c\\u671b\\u5356\\u51fa\\u7684 token \\u6570\\u91cf\\n    /// @param sqrtPriceLimitX96 \\u6ed1\\u70b9\\u4fdd\\u62a4\\uff0c\\u5f53 zeroForOne \\u4e3a true \\u65f6\\uff0c\\u4ea4\\u6613\\u7684\\u4ef7\\u683c\\u4e0d\\u80fd\\u4f4e\\u4e8e sqrtPriceLimitX96\\uff1b\\u5f53 zeroForOne \\u4e3a false \\u65f6\\uff0c\\u4ea4\\u6613\\u7684\\u4ef7\\u683c\\u4e0d\\u80fd\\u9ad8\\u4e8e sqrtPriceLimitX96\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override returns (int256 amount0, int256 amount1) {\\n        // Caching for gas saving\\n        Slot0 memory slot0_ = slot0;\\n        uint128 liquidity_ = liquidity;\\n\\n        if (zeroForOne\\n                ? sqrtPriceLimitX96 > slot0_.sqrtPriceX96 || sqrtPriceLimitX96 < TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 < slot0_.sqrtPriceX96 || sqrtPriceLimitX96 > TickMath.MAX_SQRT_RATIO\\n        ) {\\n            revert InvalidPriceLimit();\\n        }\\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: slot0_.sqrtPriceX96,\\n            tick: slot0_.tick,\\n            liquidity: liquidity_\\n        });\\n\\n        while (\\n            state.amountSpecifiedRemaining > 0 &&\\n            state.sqrtPriceX96 != sqrtPriceLimitX96\\n        ) {\\n            StepState memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.nextTick, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                1,\\n                zeroForOne\\n            );\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.nextTick);\\n\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut) = SwapMath.computeSwapStep(\\n                    state.sqrtPriceX96,\\n                    (zeroForOne\\n                            ? step.sqrtPriceNextX96 < sqrtPriceLimitX96\\n                            : step.sqrtPriceNextX96 > sqrtPriceLimitX96\\n                    )\\n                        ? sqrtPriceLimitX96\\n                        : step.sqrtPriceNextX96,\\n                    state.liquidity,\\n                    state.amountSpecifiedRemaining\\n                );\\n\\n            state.amountSpecifiedRemaining -= step.amountIn;\\n            state.amountCalculated += step.amountOut;\\n\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                if (step.initialized) {\\n                    int128 liquidityDelta = ticks.cross(step.nextTick);\\n\\n                    // \\u5f53 zeroForOne \\u4e3a true\\uff0c\\u4e5f\\u5c31\\u662f\\u4ece\\u53f3\\u5f80\\u5de6\\u7565\\u8fc7 tick\\uff0c\\n                    // liquidityDelta \\u8868\\u793a\\u4ece\\u5de6\\u5230\\u53f3\\u7565\\u8fc7 tick \\u662f liquidity \\u7684\\u53d8\\u5316\\u91cf\\uff0c\\u6240\\u4ee5\\u5e94\\u8be5\\u53d6\\u8d1f\\n                    if (zeroForOne) {\\n                        liquidityDelta = -liquidityDelta;\\n                    }\\n\\n                    state.liquidity = LiquidityMath.addLiquidity(state.liquidity, liquidityDelta);\\n\\n                    if (state.liquidity == 0) {\\n                        revert NotEnoughLiquidity();\\n                    }\\n                }\\n\\n                state.tick = zeroForOne ? step.nextTick - 1 : step.nextTick;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        if (state.tick != slot0_.tick) {\\n            (slot0.sqrtPriceX96, slot0.tick) = (state.sqrtPriceX96, state.tick);\\n        }\\n\\n        if (liquidity_ != state.liquidity) {\\n            liquidity = state.liquidity;\\n        }        \\n\\n        (amount0, amount1) = zeroForOne\\n            ? (\\n                int256(amountSpecified - state.amountSpecifiedRemaining),\\n                -int256(state.amountCalculated)\\n            )\\n            : (\\n                -int256(state.amountCalculated),\\n                int256(amountSpecified - state.amountSpecifiedRemaining)\\n            );\\n\\n        if (zeroForOne) {\\n            IERC20(token1).transfer(recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance0Before + uint256(amount0) > balance0())\\n                revert InsufficientInputAmount();\\n        } else {\\n            IERC20(token0).transfer(recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance1Before + uint256(amount1) > balance1())\\n                revert InsufficientInputAmount();\\n        }\\n\\n        emit Swap(\\n            msg.sender,\\n            recipient,\\n            amount0,\\n            amount1,\\n            slot0.sqrtPriceX96,\\n            state.liquidity,\\n            slot0.tick\\n        );\\n    }\\n\\n    function balance0() internal view returns (uint256) {\\n        return IERC20(token0).balanceOf(address(this));\\n    }\\n\\n    function balance1() internal view returns (uint256) {\\n        return IERC20(token1).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1587fad60ae1acd6be98056671e862c2c5992011b0de955ac3a0840b535955b8\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3MintCallback {\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x4087b0a14d2737727495263a43d9e2398e1e96287e566715e6442612c6184f0e\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3Pool {\\n    struct CallbackData {\\n        address token0;\\n        address token1;\\n        address payer;\\n    }\\n\\n    function slot0() external view returns (uint160 sqrtPriceX96, int24 tick);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256, int256);\\n}\",\"keccak256\":\"0x4e10f443963af3a324417271a7e79c40806b81196ba094e548cc6aea380762d0\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3SwapCallback {\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xc3c54870bbceb41a1de853ae4ed1a073d1e9bf8346e9d563a0f7a6abe1ce3a4e\",\"license\":\"MIT\"},\"contracts/lib/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x35398e97c656b7e313e9f4aebf45dff850f5762c153c1099f1efb622764d3e0a\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 2**96;\\n}\",\"keccak256\":\"0xe196a278342dc0a6d17851f211aada0e6a4b7b4397ec2cbc62b4938a08523496\",\"license\":\"MIT\"},\"contracts/lib/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n\\nlibrary LiquidityMath {\\n    /// $L = \\\\frac{\\\\Delta x \\\\sqrt{P_u} \\\\sqrt{P_l}}{\\\\Delta \\\\sqrt{P}}$\\n    function getLiquidityForAmount0(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        uint256 intermediate = PRBMath.mulDiv(\\n            sqrtPriceAX96,\\n            sqrtPriceBX96,\\n            FixedPoint96.Q96\\n        );\\n        liquidity = uint128(\\n            PRBMath.mulDiv(amount0, intermediate, sqrtPriceBX96 - sqrtPriceAX96)\\n        );\\n    }\\n\\n    /// $L = \\\\frac{\\\\Delta y}{\\\\Delta \\\\sqrt{P}}$\\n    function getLiquidityForAmount1(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        liquidity = uint128(\\n            PRBMath.mulDiv(\\n                amount1,\\n                FixedPoint96.Q96,\\n                sqrtPriceBX96 - sqrtPriceAX96\\n            )\\n        );\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint160 sqrtPriceX96,\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        if (sqrtPriceX96 <= sqrtPriceAX96) {\\n            liquidity = getLiquidityForAmount0(\\n                sqrtPriceAX96,\\n                sqrtPriceBX96,\\n                amount0\\n            );\\n        } else if (sqrtPriceX96 <= sqrtPriceBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(\\n                sqrtPriceX96,\\n                sqrtPriceBX96,\\n                amount0\\n            );\\n            uint128 liquidity1 = getLiquidityForAmount1(\\n                sqrtPriceAX96,\\n                sqrtPriceX96,\\n                amount1\\n            );\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(\\n                sqrtPriceAX96,\\n                sqrtPriceBX96,\\n                amount1\\n            );\\n        }\\n    }\\n\\n    /// \\u79fb\\u9664\\u6d41\\u52a8\\u6027\\u65f6\\u4e5f\\u8c03\\u7528\\u8fd9\\u4e2a\\u65b9\\u6cd5\\uff0c\\u53ea\\u4e0d\\u8fc7\\u6b64\\u65f6 y \\u662f\\u8d1f\\u6570\\n    function addLiquidity(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            z = x - uint128(-y);\\n        } else {\\n            z = x + uint128(y);\\n        }\\n    }\\n}\",\"keccak256\":\"0x7b90db3a92761c3e7f1caf52e4a6be585000f536c2b11a43fe8cdf864a071ae4\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./FixedPoint96.sol\\\";\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\n\\nlibrary Math {\\n    /// @notice Calculates amount0 delta between two prices\\n    function calcAmount0Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        require(sqrtPriceAX96 > 0);\\n\\n        amount0 = divRoundingUp(\\n            mulDivRoundingUp(\\n                (uint256(liquidity) << FixedPoint96.RESOLUTION),\\n                (sqrtPriceBX96 - sqrtPriceAX96),\\n                sqrtPriceBX96\\n            ),\\n            sqrtPriceAX96\\n        );\\n    }\\n\\n    /// @notice Calculates amount1 delta between two prices\\n    /// TODO: round down when removing liquidity\\n    function calcAmount1Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        amount1 = mulDivRoundingUp(\\n            liquidity,\\n            (sqrtPriceBX96 - sqrtPriceAX96),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtPriceNextX96) {\\n        sqrtPriceNextX96 = zeroForOne\\n            ? getNextSqrtPriceFromAmount0RoundingUp(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            )\\n            : getNextSqrtPriceFromAmount1RoundingDown(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        uint256 numerator = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 product = amountIn * sqrtPriceX96;\\n\\n        // If product doesn't overflow, use the precise formula.\\n        if (product / amountIn == sqrtPriceX96) {\\n            uint256 denominator = numerator + product;\\n            if (denominator >= numerator) {\\n                return\\n                    uint160(\\n                        mulDivRoundingUp(numerator, sqrtPriceX96, denominator)\\n                    );\\n            }\\n        }\\n\\n        // If product overflows, use a less precise formula.\\n        return\\n            uint160(\\n                divRoundingUp(numerator, (numerator / sqrtPriceX96) + amountIn)\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        return\\n            sqrtPriceX96 +\\n            uint160((amountIn << FixedPoint96.RESOLUTION) / liquidity);\\n    }\\n\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function divRoundingUp(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        assembly {\\n            result := add(\\n                div(numerator, denominator),\\n                gt(mod(numerator, denominator), 0)\\n            )\\n        }\\n    }\\n}\",\"keccak256\":\"0x361c51ceeb298dea355d2de30dc4d382142d2b38f4c16391dd98cf739bf018e0\",\"license\":\"MIT\"},\"contracts/lib/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Position {\\n    struct Info {\\n        uint128 liquidity;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Position.Info) storage self,\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[\\n            keccak256(abi.encodePacked(owner, lowerTick, upperTick))\\n        ];\\n    }\\n\\n    function update(Info storage self, uint128 liquidityDelta) internal {\\n        uint128 liquidityBefore = self.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        self.liquidity = liquidityAfter;\\n    }\\n}\",\"keccak256\":\"0xd0f3469dabe9d8ef81663eed32c35f42d16dd0dec86ac9a8ae1c5a092886baa3\",\"license\":\"MIT\"},\"contracts/lib/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./Math.sol\\\";\\n\\nlibrary SwapMath {\\n    function computeSwapStep(\\n        uint160 sqrtPriceCurrentX96,\\n        uint160 sqrtPriceTargetX96,\\n        uint128 liquidity,\\n        uint256 amountRemaining\\n    )\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceNextX96, uint256 amountIn, uint256 amountOut)\\n    {\\n        bool zeroForOne = sqrtPriceCurrentX96 >= sqrtPriceTargetX96;\\n\\n        amountIn = zeroForOne\\n            ? Math.calcAmount0Delta(\\n                sqrtPriceCurrentX96,\\n                sqrtPriceTargetX96,\\n                liquidity\\n            )\\n            : Math.calcAmount1Delta(\\n                sqrtPriceCurrentX96,\\n                sqrtPriceTargetX96,\\n                liquidity\\n            );\\n\\n        if (amountRemaining >= amountIn) {\\n            // \\u6b64\\u65f6\\u8bf4\\u660e\\u5f53\\u524d tick \\u533a\\u95f4\\u4e0d\\u8db3\\u4ee5\\u6ee1\\u8db3\\u6240\\u6709\\u7684\\u4ea4\\u6613\\u91d1\\u989d\\uff0c\\n            sqrtPriceNextX96 = sqrtPriceTargetX96;\\n        } else {\\n            // \\u6b64\\u65f6\\u8bf4\\u660e\\u5f53\\u524d tick \\u533a\\u95f4\\u8db3\\u4ee5\\u6ee1\\u8db3\\u4ea4\\u6613\\u91d1\\u989d\\n            // sqrtPriceCurrentX96 < sqrtPriceNextX96 < sqrtPriceTargetX96\\n            sqrtPriceNextX96 = Math.getNextSqrtPriceFromInput(\\n                sqrtPriceCurrentX96,\\n                liquidity,\\n                amountRemaining,\\n                zeroForOne\\n            );\\n        }\\n\\n        amountIn = Math.calcAmount0Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n        amountOut = Math.calcAmount1Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n\\n        if (!zeroForOne) {\\n            (amountIn, amountOut) = (amountOut, amountIn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa64f457879005d052c37aaef606d5ee6a675ebfd44d94b7860394f8e67398b14\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./LiquidityMath.sol\\\";\\n\\nlibrary Tick {\\n    struct Info {\\n        bool initialized;\\n        // total liquidity at tick\\n        // \\u8fd9\\u4e2a tick \\u7684\\u603b\\u7684 liquidity\\n        uint128 liquidityGross;\\n        // amount of liqudiity added or subtracted when tick is crossed\\n        // \\u4ece\\u5de6\\u5230\\u53f3\\u8de8\\u8fc7\\u8fd9\\u4e2a tick \\u662f liquidity \\u7684\\u589e\\u91cf\\uff0c\\n        int128 liquidityNet;\\n    }\\n\\n    /// @param upper \\u662f\\u5426\\u662f\\u533a\\u95f4\\u7684\\u4e0a\\u8fb9\\u754c\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int128 liquidityDelta,\\n        bool upper\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage tickInfo = self[tick];\\n        uint128 liquidityBefore = tickInfo.liquidityGross;\\n        uint128 liquidityAfter = LiquidityMath.addLiquidity(liquidityBefore, liquidityDelta);\\n\\n        flipped = (liquidityAfter == 0) != (liquidityBefore == 0);\\n\\n        if (liquidityBefore == 0) {\\n            tickInfo.initialized = true;\\n        }\\n\\n        tickInfo.liquidityGross = liquidityAfter;\\n        // \\u5982\\u679c\\u8fd9\\u4e2a tick \\u662f\\u533a\\u95f4\\u7684\\u4e0a\\u8fb9\\u754c\\uff0c\\u90a3\\u4e48 \\u4ece\\u5de6\\u5230\\u53f3 \\u8de8\\u8d8a\\u8fd9\\u4e2a tick \\u65f6\\u5e94\\u8be5 - liquidityDelta\\n        // \\u5982\\u679c\\u662f\\u4e0b\\u8fb9\\u754c\\uff0c\\u90a3\\u4e48 \\u4ece\\u5de6\\u5230\\u53f3 \\u8de8\\u8d8a\\u8fd9\\u4e2a tick \\u65f6\\u5e94\\u8be5 + liquidityDelta\\n        tickInfo.liquidityNet = upper\\n            ? int128(int256(tickInfo.liquidityNet) - liquidityDelta)\\n            : int128(int256(tickInfo.liquidityNet) + liquidityDelta);\\n    }\\n\\n    function cross(mapping(int24 => Tick.Info) storage self, int24 tick)\\n        internal\\n        view\\n        returns (int128 liquidityDelta)\\n    {\\n        Tick.Info storage info = self[tick];\\n        liquidityDelta = info.liquidityNet;\\n    }\\n}\",\"keccak256\":\"0x6b4e95f4209d5abcae596719afb70c44762942660f94d17053025299a0ef4f74\",\"license\":\"MIT\"},\"contracts/lib/TickBitMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(uint24(tick % 256));\\n    }\\n\\n    /// \\u7ffb\\u8f6c\\u4f4d\\u56fe\\u4e2d\\u7684\\u67d0\\u4e00\\u4f4d\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            // \\u5356\\u51fa token0\\uff08\\u5356\\u51fax\\u4e70\\u5165y\\uff09\\uff0c\\u6b64\\u65f6 tick \\u5e94\\u8be5\\u662f\\u9010\\u6e10\\u53d8\\u5927\\u7684\\uff0c\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\\n                : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(uint24((BitMath.leastSignificantBit(masked) - bitPos)))) * tickSpacing\\n                : (compressed + 1 + int24(uint24((type(uint8).max - bitPos)))) * tickSpacing;\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3df4d69497cd2b08b571b9911d091577bd9f9d6ad76d2277de2e156e57bbbad1\",\"license\":\"MIT\"},\"contracts/lib/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\",\"keccak256\":\"0x4ed462707766eac6fb9e951a5825e487ed5a0a807b3bde8968e19d8704fbc05f\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003d0838038062003d08833981810160405281019062000037919062000223565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018260020b8152506000808201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff1602179055509050505050505062000295565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017c826200014f565b9050919050565b6200018e816200016f565b81146200019a57600080fd5b50565b600081519050620001ae8162000183565b92915050565b620001bf816200014f565b8114620001cb57600080fd5b50565b600081519050620001df81620001b4565b92915050565b60008160020b9050919050565b620001fd81620001e5565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b6000806000806080858703121562000240576200023f6200014a565b5b600062000250878288016200019d565b945050602062000263878288016200019d565b93505060406200027687828801620001ce565b925050606062000289878288016200020c565b91505092959194509250565b60805160a051613a31620002d76000396000818161073f01528181610ea60152611c8c0152600081816101cc0152818161101d0152611beb0152613a316000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635339c2961161005b5780635339c29614610119578063d21220a714610149578063dd5a12d814610167578063f30dba931461019857610088565b80630dfe16811461008d5780631a686502146100ab5780633850c7bd146100c95780633c8a7d8d146100e8575b600080fd5b6100956101ca565b6040516100a29190612a46565b60405180910390f35b6100b36101ee565b6040516100c09190612a8c565b60405180910390f35b6100d1610210565b6040516100df929190612ad2565b60405180910390f35b61010260048036038101906100fd9190612bee565b61024f565b604051610110929190612ca1565b60405180910390f35b610133600480360381019061012e9190612d03565b610725565b6040516101409190612d30565b60405180910390f35b61015161073d565b60405161015e9190612a46565b60405180910390f35b610181600480360381019061017c9190612ddb565b610761565b60405161018f929190612e8e565b60405180910390f35b6101b260048036038101906101ad9190612eb7565b611242565b6040516101c193929190612f0f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460020b905082565b6000808560020b8760020b12158061028c57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8760020b125b806102c557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186102bc90612f75565b60020b8660020b135b156102fc576040517f064847d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000856fffffffffffffffffffffffffffffffff1611610348576040517f1007454800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103638887600060026112a2909392919063ffffffff16565b905060006103808888600160026112a2909392919063ffffffff16565b905081156103a05761039f89600160036114329092919063ffffffff16565b5b80156103be576103bd88600160036114329092919063ffffffff16565b5b60006103d88b8b8b60046114a2909392919063ffffffff16565b90506103ed88826114ea90919063ffffffff16565b6000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b8152505090508a60020b816020015160020b12156104a45761049d61048e8c611560565b6104978c611560565b8b611a2d565b955061056c565b8960020b816020015160020b121561054d576104cd81600001516104c78c611560565b8b611a2d565b95506104e681600001516104e08d611560565b8b611b14565b9450610510600160009054906101000a90046fffffffffffffffffffffffffffffffff168a611ba9565b600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061056b565b6105686105598c611560565b6105628c611560565b8b611b14565b94505b5b600080600088111561058357610580611be7565b91505b600087111561059757610594611c88565b90505b3373ffffffffffffffffffffffffffffffffffffffff1663d348799789898d8d6040518563ffffffff1660e01b81526004016105d6949392919061301b565b600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b50505050600088118015610629575061061b611be7565b8883610627919061305b565b115b15610660576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000871180156106815750610673611c88565b878261067f919061305b565b115b156106b8576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b60020b8d60020b8f73ffffffffffffffffffffffffffffffffffffffff167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde338f8d8d60405161070c949392919061308f565b60405180910390a4505050505050965096945050505050565b60036020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b8152505090506000600160009054906101000a90046fffffffffffffffffffffffffffffffff1690508861089157816000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16108061088c575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16115b610900565b816000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1611806108ff57506401000276a373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16105b5b15610937576040517fb53bbacc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a001604052808a815260200160008152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152602001846020015160020b8152602001836fffffffffffffffffffffffffffffffff1681525090505b600081600001511180156109db57508773ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614155b15610d55576109e861299e565b8160400151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610a41826060015160018d6003611d29909392919063ffffffff16565b826020018360a00182151515158152508260020b60020b8152505050610a6a8160200151611560565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b3982604001518c610ae6578a73ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff1611610b1a565b8a73ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16105b610b28578260400151610b2a565b8a5b84608001518560000151611f17565b84604001846060018560800183815250838152508373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505050806060015182600001818151610b9691906130d4565b91508181525050806080015182602001818151610bb3919061305b565b91508181525050806040015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1603610cf4578060a0015115610cbd576000610c1982602001516002611fc590919063ffffffff16565b90508b15610c2e5780610c2b90613108565b90505b610c3c836080015182611ba9565b83608001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050600083608001516fffffffffffffffffffffffffffffffff1603610cbb576040517f4323a55500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8a610ccc578060200151610cde565b60018160200151610cdd9190613150565b5b826060019060020b908160020b81525050610d4f565b806000015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614610d4e57610d3c8260400151611ffd565b826060019060020b908160020b815250505b5b50610997565b826020015160020b816060015160020b14610de257806040015181606001516000800160008060000160148491906101000a81548162ffffff021916908360020b62ffffff1602179055508391906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b80608001516fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1614610e4f578060800151600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b89610e77578060200151610e62906131ab565b81600001518a610e7291906130d4565b610e96565b806000015189610e8791906130d4565b8160200151610e95906131ab565b5b8095508196505050891561101b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c86610eeb906131ab565b6040518363ffffffff1660e01b8152600401610f089291906131f3565b6020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190613231565b506000610f56611be7565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3387878b8b6040518563ffffffff1660e01b8152600401610f97949392919061325e565b600060405180830381600087803b158015610fb157600080fd5b505af1158015610fc5573d6000803e3d6000fd5b50505050610fd1611be7565b8682610fdd919061305b565b1115611015576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061118e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c87611062906131ab565b6040518363ffffffff1660e01b815260040161107f9291906131f3565b6020604051808303816000875af115801561109e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c29190613231565b5060006110cd611c88565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3387878b8b6040518563ffffffff1660e01b815260040161110e949392919061325e565b600060405180830381600087803b15801561112857600080fd5b505af115801561113c573d6000803e3d6000fd5b50505050611148611c88565b8582611154919061305b565b111561118c576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca6787876000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686608001516000800160149054906101000a900460020b60405161122c95949392919061329e565b60405180910390a3505050965096945050505050565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a9004600f0b905083565b6000808560008660020b60020b8152602001908152602001600020905060008160000160019054906101000a90046fffffffffffffffffffffffffffffffff16905060006112f08287611ba9565b90506000826fffffffffffffffffffffffffffffffff161415156000826fffffffffffffffffffffffffffffffff16141515141593506000826fffffffffffffffffffffffffffffffff160361135e5760018360000160006101000a81548160ff0219169083151502179055505b808360000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550846113c65785600f0b8360010160009054906101000a9004600f0b600f0b6113c191906132f1565b6113ea565b85600f0b8360010160009054906101000a9004600f0b600f0b6113e99190613335565b5b8360010160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550505050949350505050565b6000818361144091906133a7565b60020b1461144d57600080fd5b600080611464838561145f91906133d8565b6123fc565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b60008460008585856040516020016114bc939291906134c0565b6040516020818303038152906040528051906020012081526020019081526020016000209050949350505050565b60008260000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000828261151d91906134fd565b9050808460000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b60008060008360020b12611577578260020b611585565b8260020b611584906131ab565b5b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186115b190612f75565b62ffffff168111156115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ef9061359e565b60405180910390fd5b600080600183160361161b5770010000000000000000000000000000000061162d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600060028316146116705760806ffff97272373d413259a46990580e213a8261166b91906135be565b901c90505b6000600483161461169e5760806ffff2e50f5f656932ef12357cf3c7fdcc8261169991906135be565b901c90505b600060088316146116cc5760806fffe5caca7e10e4e61c3624eaa0941cd0826116c791906135be565b901c90505b600060108316146116fa5760806fffcb9843d60f6159c9db58835c926644826116f591906135be565b901c90505b600060208316146117285760806fff973b41fa98c081472e6896dfb254c08261172391906135be565b901c90505b600060408316146117565760806fff2ea16466c96a3843ec78b326b528618261175191906135be565b901c90505b600060808316146117845760806ffe5dee046a99a2a811c461f1969c30538261177f91906135be565b901c90505b60006101008316146117b35760806ffcbe86c7900a88aedcffc83b479aa3a4826117ae91906135be565b901c90505b60006102008316146117e25760806ff987a7253ac413176f2b074cf7815e54826117dd91906135be565b901c90505b60006104008316146118115760806ff3392b0822b70005940c7a398e4b70f38261180c91906135be565b901c90505b60006108008316146118405760806fe7159475a2c29b7443b29c7fa6e889d98261183b91906135be565b901c90505b600061100083161461186f5760806fd097f3bdfd2022b8845ad8f792aa58258261186a91906135be565b901c90505b600061200083161461189e5760806fa9f746462d870fdf8a65dc1f90e061e58261189991906135be565b901c90505b60006140008316146118cd5760806f70d869a156d2a1b890bb3df62baf32f7826118c891906135be565b901c90505b60006180008316146118fc5760806f31be135f97d08fd981231505542fcfa6826118f791906135be565b901c90505b60006201000083161461192c5760806f09aa508b5b7a84e1c677de54f3e99bc98261192791906135be565b901c90505b60006202000083161461195b5760806e5d6af8dedb81196699c329225ee6048261195691906135be565b901c90505b6000620400008316146119895760806d2216e584f5fa1ea926041bedfe988261198491906135be565b901c90505b6000620800008316146119b55760806b048a170391f7dc42444e8fa2826119b091906135be565b901c90505b60008460020b13156119f057807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6119ed9190613600565b90505b600064010000000082611a039190613631565b14611a0f576001611a12565b60005b60ff16602082901c611a24919061305b565b92505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611a6e57828480945081955050505b60008473ffffffffffffffffffffffffffffffffffffffff1611611a9157600080fd5b611b0b611aef606060ff16846fffffffffffffffffffffffffffffffff16901b8686611abd9190613662565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1661241e565b8573ffffffffffffffffffffffffffffffffffffffff16612489565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611b5557828480945081955050505b611ba0826fffffffffffffffffffffffffffffffff168585611b779190613662565b73ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061241e565b90509392505050565b60008082600f0b1215611bd25781611bc090613108565b83611bcb91906136aa565b9050611be1565b8183611bde91906134fd565b90505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c429190612a46565b602060405180830381865afa158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c839190613703565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ce39190612a46565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190613703565b905090565b60008060008486611d3a91906133d8565b905060008660020b128015611d5e575060008587611d5891906133a7565b60020b14155b15611d72578080611d6e90613730565b9150505b8315611e3557600080611d84836123fc565b9150915060008160ff166001901b60018360ff166001901b611da691906130d4565b611db0919061305b565b90506000818b60008660010b60010b8152602001908152602001600020541690506000811415955085611dfc57888360ff1686611ded9190613150565b611df79190613778565b611e2a565b88611e068261249c565b84611e1191906137c2565b60ff1686611e1f9190613150565b611e299190613778565b5b965050505050611f0d565b600080611e4d600184611e4891906137f7565b6123fc565b91509150600060018260ff166001901b611e6791906130d4565b1990506000818b60008660010b60010b8152602001908152602001600020541690506000811415955085611ecc57888360ff611ea391906137c2565b60ff16600187611eb391906137f7565b611ebd91906137f7565b611ec79190613778565b611f06565b8883611ed7836125bf565b611ee191906137c2565b60ff16600187611ef191906137f7565b611efb91906137f7565b611f059190613778565b5b9650505050505b5094509492505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161015905080611f6457611f5f888888611b14565b611f70565b611f6f888888611a2d565b5b9250828510611f8157869350611f90565b611f8d8887878461272e565b93505b611f9b888588611a2d565b9250611fa8888588611b14565b915080611fba57818380935081945050505b509450945094915050565b6000808360008460020b60020b815260200190815260200160002090508060010160009054906101000a9004600f0b91505092915050565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161015801561207f575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16105b6120be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b59061389e565b60405180910390fd5b600060208373ffffffffffffffffffffffffffffffffffffffff16901b9050600081905060006fffffffffffffffffffffffffffffffff821160071b808217915082811c92505067ffffffffffffffff821160061b808217915082811c92505063ffffffff821160051b808217915082811c92505061ffff821160041b808217915082811c92505060ff821160031b808217915082811c925050600f821160021b808217915082811c9250506003821160011b808217915082811c92505060018211808217915050608081106121a557607f8161219b91906130d4565b83901c91506121b8565b80607f6121b291906130d4565b83901b91505b600060406080836121c99190613335565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b82179150506000693627a301d71055774c858261234c91906138be565b9050600060806f028f6481ab7f045a5af012a19d003aaa8361236e9190613335565b901d9050600060806fdb2df09e81959a81455e260799a0632f8461239291906132f1565b901d90508060020b8260020b146123ec578873ffffffffffffffffffffffffffffffffffffffff166123c382611560565b73ffffffffffffffffffffffffffffffffffffffff1611156123e557816123e7565b805b6123ee565b815b975050505050505050919050565b60008060088360020b901d91506101008361241791906133a7565b9050915091565b600061242b84848461275b565b90506000828061243e5761243d613378565b5b8486091115612482577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061247357600080fd5b808061247e90613936565b9150505b9392505050565b6000808284061182840401905092915050565b60008082116124aa57600080fd5b70010000000000000000000000000000000082106124d957608082901c91506080816124d6919061397e565b90505b68010000000000000000821061250057604082901c91506040816124fd919061397e565b90505b640100000000821061252357602082901c9150602081612520919061397e565b90505b62010000821061254457601082901c9150601081612541919061397e565b90505b610100821061256457600882901c9150600881612561919061397e565b90505b6010821061258357600482901c9150600481612580919061397e565b90505b600482106125a257600282901c915060028161259f919061397e565b90505b600282106125ba576001816125b7919061397e565b90505b919050565b60008082116125cd57600080fd5b60ff905060006fffffffffffffffffffffffffffffffff801683161115612602576080816125fb91906137c2565b905061260a565b608082901c91505b600067ffffffffffffffff8016831611156126335760408161262c91906137c2565b905061263b565b604082901c91505b600063ffffffff8016831611156126605760208161265991906137c2565b9050612668565b602082901c91505b600061ffff80168316111561268b5760108161268491906137c2565b9050612693565b601082901c91505b600060ff8016831611156126b5576008816126ae91906137c2565b90506126bd565b600882901c91505b6000600f831611156126dd576004816126d691906137c2565b90506126e5565b600482901c91505b6000600383161115612705576002816126fe91906137c2565b905061270d565b600282901c91505b60006001831611156127295760018161272691906137c2565b90505b919050565b60008161274557612740858585612870565b612751565b6127508585856128ab565b5b9050949350505050565b60008060008019858709858702925082811083820303915050600081036127965783828161278c5761278b613378565b5b0492505050612869565b8381106127dc5780846040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004016127d3929190612ca1565b60405180910390fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000826fffffffffffffffffffffffffffffffff16606060ff1683901b6128979190613600565b846128a291906139b3565b90509392505050565b600080606060ff16846fffffffffffffffffffffffffffffffff16901b905060008573ffffffffffffffffffffffffffffffffffffffff16846128ee91906135be565b90508573ffffffffffffffffffffffffffffffffffffffff1684826129139190613600565b0361295c5760008183612926919061305b565b905082811061295a57612950838873ffffffffffffffffffffffffffffffffffffffff168361241e565b9350505050612997565b505b61299282858873ffffffffffffffffffffffffffffffffffffffff16856129839190613600565b61298d919061305b565b612489565b925050505b9392505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060020b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a3082612a05565b9050919050565b612a4081612a25565b82525050565b6000602082019050612a5b6000830184612a37565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b612a8681612a61565b82525050565b6000602082019050612aa16000830184612a7d565b92915050565b612ab081612a05565b82525050565b60008160020b9050919050565b612acc81612ab6565b82525050565b6000604082019050612ae76000830185612aa7565b612af46020830184612ac3565b9392505050565b600080fd5b600080fd5b612b0e81612a25565b8114612b1957600080fd5b50565b600081359050612b2b81612b05565b92915050565b612b3a81612ab6565b8114612b4557600080fd5b50565b600081359050612b5781612b31565b92915050565b612b6681612a61565b8114612b7157600080fd5b50565b600081359050612b8381612b5d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612bae57612bad612b89565b5b8235905067ffffffffffffffff811115612bcb57612bca612b8e565b5b602083019150836001820283011115612be757612be6612b93565b5b9250929050565b60008060008060008060a08789031215612c0b57612c0a612afb565b5b6000612c1989828a01612b1c565b9650506020612c2a89828a01612b48565b9550506040612c3b89828a01612b48565b9450506060612c4c89828a01612b74565b935050608087013567ffffffffffffffff811115612c6d57612c6c612b00565b5b612c7989828a01612b98565b92509250509295509295509295565b6000819050919050565b612c9b81612c88565b82525050565b6000604082019050612cb66000830185612c92565b612cc36020830184612c92565b9392505050565b60008160010b9050919050565b612ce081612cca565b8114612ceb57600080fd5b50565b600081359050612cfd81612cd7565b92915050565b600060208284031215612d1957612d18612afb565b5b6000612d2784828501612cee565b91505092915050565b6000602082019050612d456000830184612c92565b92915050565b60008115159050919050565b612d6081612d4b565b8114612d6b57600080fd5b50565b600081359050612d7d81612d57565b92915050565b612d8c81612c88565b8114612d9757600080fd5b50565b600081359050612da981612d83565b92915050565b612db881612a05565b8114612dc357600080fd5b50565b600081359050612dd581612daf565b92915050565b60008060008060008060a08789031215612df857612df7612afb565b5b6000612e0689828a01612b1c565b9650506020612e1789828a01612d6e565b9550506040612e2889828a01612d9a565b9450506060612e3989828a01612dc6565b935050608087013567ffffffffffffffff811115612e5a57612e59612b00565b5b612e6689828a01612b98565b92509250509295509295509295565b6000819050919050565b612e8881612e75565b82525050565b6000604082019050612ea36000830185612e7f565b612eb06020830184612e7f565b9392505050565b600060208284031215612ecd57612ecc612afb565b5b6000612edb84828501612b48565b91505092915050565b612eed81612d4b565b82525050565b600081600f0b9050919050565b612f0981612ef3565b82525050565b6000606082019050612f246000830186612ee4565b612f316020830185612a7d565b612f3e6040830184612f00565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f8082612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203612fb257612fb1612f46565b5b816000039050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612ffa8385612fbd565b9350613007838584612fce565b61301083612fdd565b840190509392505050565b60006060820190506130306000830187612c92565b61303d6020830186612c92565b8181036040830152613050818486612fee565b905095945050505050565b600061306682612c88565b915061307183612c88565b925082820190508082111561308957613088612f46565b5b92915050565b60006080820190506130a46000830187612a37565b6130b16020830186612a7d565b6130be6040830185612c92565b6130cb6060830184612c92565b95945050505050565b60006130df82612c88565b91506130ea83612c88565b925082820390508181111561310257613101612f46565b5b92915050565b600061311382612ef3565b91507fffffffffffffffffffffffffffffffff80000000000000000000000000000000820361314557613144612f46565b5b816000039050919050565b600061315b82612ab6565b915061316683612ab6565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000821217156131a5576131a4612f46565b5b92915050565b60006131b682612e75565b91507f800000000000000000000000000000000000000000000000000000000000000082036131e8576131e7612f46565b5b816000039050919050565b60006040820190506132086000830185612a37565b6132156020830184612c92565b9392505050565b60008151905061322b81612d57565b92915050565b60006020828403121561324757613246612afb565b5b60006132558482850161321c565b91505092915050565b60006060820190506132736000830187612e7f565b6132806020830186612e7f565b8181036040830152613293818486612fee565b905095945050505050565b600060a0820190506132b36000830188612e7f565b6132c06020830187612e7f565b6132cd6040830186612aa7565b6132da6060830185612a7d565b6132e76080830184612ac3565b9695505050505050565b60006132fc82612e75565b915061330783612e75565b92508282019050828112156000831216838212600084121516171561332f5761332e612f46565b5b92915050565b600061334082612e75565b915061334b83612e75565b925082820390508181126000841216828213600085121516171561337257613371612f46565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133b282612ab6565b91506133bd83612ab6565b9250826133cd576133cc613378565b5b828207905092915050565b60006133e382612ab6565b91506133ee83612ab6565b9250826133fe576133fd613378565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008314161561343757613436612f46565b5b828205905092915050565b60008160601b9050919050565b600061345a82613442565b9050919050565b600061346c8261344f565b9050919050565b61348461347f82612a25565b613461565b82525050565b60008160e81b9050919050565b60006134a28261348a565b9050919050565b6134ba6134b582612ab6565b613497565b82525050565b60006134cc8286613473565b6014820191506134dc82856134a9565b6003820191506134ec82846134a9565b600382019150819050949350505050565b600061350882612a61565b915061351383612a61565b925082820190506fffffffffffffffffffffffffffffffff81111561353b5761353a612f46565b5b92915050565b600082825260208201905092915050565b7f5400000000000000000000000000000000000000000000000000000000000000600082015250565b6000613588600183613541565b915061359382613552565b602082019050919050565b600060208201905081810360008301526135b78161357b565b9050919050565b60006135c982612c88565b91506135d483612c88565b92508282026135e281612c88565b915082820484148315176135f9576135f8612f46565b5b5092915050565b600061360b82612c88565b915061361683612c88565b92508261362657613625613378565b5b828204905092915050565b600061363c82612c88565b915061364783612c88565b92508261365757613656613378565b5b828206905092915050565b600061366d82612a05565b915061367883612a05565b9250828203905073ffffffffffffffffffffffffffffffffffffffff8111156136a4576136a3612f46565b5b92915050565b60006136b582612a61565b91506136c083612a61565b925082820390506fffffffffffffffffffffffffffffffff8111156136e8576136e7612f46565b5b92915050565b6000815190506136fd81612d83565b92915050565b60006020828403121561371957613718612afb565b5b6000613727848285016136ee565b91505092915050565b600061373b82612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000820361376d5761376c612f46565b5b600182039050919050565b600061378382612ab6565b915061378e83612ab6565b925082820261379c81612ab6565b91508082146137ae576137ad612f46565b5b5092915050565b600060ff82169050919050565b60006137cd826137b5565b91506137d8836137b5565b9250828203905060ff8111156137f1576137f0612f46565b5b92915050565b600061380282612ab6565b915061380d83612ab6565b925082820190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561384c5761384b612f46565b5b92915050565b7f5200000000000000000000000000000000000000000000000000000000000000600082015250565b6000613888600183613541565b915061389382613852565b602082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b60006138c982612e75565b91506138d483612e75565b92508282026138e281612e75565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561391a57613919612f46565b5b828205841483151761392f5761392e612f46565b5b5092915050565b600061394182612c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361397357613972612f46565b5b600182019050919050565b6000613989826137b5565b9150613994836137b5565b9250828201905060ff8111156139ad576139ac612f46565b5b92915050565b60006139be82612a05565b91506139c983612a05565b9250828201905073ffffffffffffffffffffffffffffffffffffffff8111156139f5576139f4612f46565b5b9291505056fea2646970667358221220cfd952fc5fdd41b2bfa3d34757552773b6be331d0a1bbe921963713912cf6a6464736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80635339c2961161005b5780635339c29614610119578063d21220a714610149578063dd5a12d814610167578063f30dba931461019857610088565b80630dfe16811461008d5780631a686502146100ab5780633850c7bd146100c95780633c8a7d8d146100e8575b600080fd5b6100956101ca565b6040516100a29190612a46565b60405180910390f35b6100b36101ee565b6040516100c09190612a8c565b60405180910390f35b6100d1610210565b6040516100df929190612ad2565b60405180910390f35b61010260048036038101906100fd9190612bee565b61024f565b604051610110929190612ca1565b60405180910390f35b610133600480360381019061012e9190612d03565b610725565b6040516101409190612d30565b60405180910390f35b61015161073d565b60405161015e9190612a46565b60405180910390f35b610181600480360381019061017c9190612ddb565b610761565b60405161018f929190612e8e565b60405180910390f35b6101b260048036038101906101ad9190612eb7565b611242565b6040516101c193929190612f0f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046fffffffffffffffffffffffffffffffff1681565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460020b905082565b6000808560020b8760020b12158061028c57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8760020b125b806102c557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186102bc90612f75565b60020b8660020b135b156102fc576040517f064847d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000856fffffffffffffffffffffffffffffffff1611610348576040517f1007454800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103638887600060026112a2909392919063ffffffff16565b905060006103808888600160026112a2909392919063ffffffff16565b905081156103a05761039f89600160036114329092919063ffffffff16565b5b80156103be576103bd88600160036114329092919063ffffffff16565b5b60006103d88b8b8b60046114a2909392919063ffffffff16565b90506103ed88826114ea90919063ffffffff16565b6000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b8152505090508a60020b816020015160020b12156104a45761049d61048e8c611560565b6104978c611560565b8b611a2d565b955061056c565b8960020b816020015160020b121561054d576104cd81600001516104c78c611560565b8b611a2d565b95506104e681600001516104e08d611560565b8b611b14565b9450610510600160009054906101000a90046fffffffffffffffffffffffffffffffff168a611ba9565b600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061056b565b6105686105598c611560565b6105628c611560565b8b611b14565b94505b5b600080600088111561058357610580611be7565b91505b600087111561059757610594611c88565b90505b3373ffffffffffffffffffffffffffffffffffffffff1663d348799789898d8d6040518563ffffffff1660e01b81526004016105d6949392919061301b565b600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b50505050600088118015610629575061061b611be7565b8883610627919061305b565b115b15610660576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000871180156106815750610673611c88565b878261067f919061305b565b115b156106b8576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b60020b8d60020b8f73ffffffffffffffffffffffffffffffffffffffff167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde338f8d8d60405161070c949392919061308f565b60405180910390a4505050505050965096945050505050565b60036020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000806040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460020b60020b60020b8152505090506000600160009054906101000a90046fffffffffffffffffffffffffffffffff1690508861089157816000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16108061088c575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16115b610900565b816000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1611806108ff57506401000276a373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16105b5b15610937576040517fb53bbacc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a001604052808a815260200160008152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152602001846020015160020b8152602001836fffffffffffffffffffffffffffffffff1681525090505b600081600001511180156109db57508773ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614155b15610d55576109e861299e565b8160400151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610a41826060015160018d6003611d29909392919063ffffffff16565b826020018360a00182151515158152508260020b60020b8152505050610a6a8160200151611560565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b3982604001518c610ae6578a73ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff1611610b1a565b8a73ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16105b610b28578260400151610b2a565b8a5b84608001518560000151611f17565b84604001846060018560800183815250838152508373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250505050806060015182600001818151610b9691906130d4565b91508181525050806080015182602001818151610bb3919061305b565b91508181525050806040015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1603610cf4578060a0015115610cbd576000610c1982602001516002611fc590919063ffffffff16565b90508b15610c2e5780610c2b90613108565b90505b610c3c836080015182611ba9565b83608001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050600083608001516fffffffffffffffffffffffffffffffff1603610cbb576040517f4323a55500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8a610ccc578060200151610cde565b60018160200151610cdd9190613150565b5b826060019060020b908160020b81525050610d4f565b806000015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1614610d4e57610d3c8260400151611ffd565b826060019060020b908160020b815250505b5b50610997565b826020015160020b816060015160020b14610de257806040015181606001516000800160008060000160148491906101000a81548162ffffff021916908360020b62ffffff1602179055508391906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b80608001516fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1614610e4f578060800151600160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b89610e77578060200151610e62906131ab565b81600001518a610e7291906130d4565b610e96565b806000015189610e8791906130d4565b8160200151610e95906131ab565b5b8095508196505050891561101b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c86610eeb906131ab565b6040518363ffffffff1660e01b8152600401610f089291906131f3565b6020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190613231565b506000610f56611be7565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3387878b8b6040518563ffffffff1660e01b8152600401610f97949392919061325e565b600060405180830381600087803b158015610fb157600080fd5b505af1158015610fc5573d6000803e3d6000fd5b50505050610fd1611be7565b8682610fdd919061305b565b1115611015576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061118e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c87611062906131ab565b6040518363ffffffff1660e01b815260040161107f9291906131f3565b6020604051808303816000875af115801561109e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c29190613231565b5060006110cd611c88565b90503373ffffffffffffffffffffffffffffffffffffffff1663fa461e3387878b8b6040518563ffffffff1660e01b815260040161110e949392919061325e565b600060405180830381600087803b15801561112857600080fd5b505af115801561113c573d6000803e3d6000fd5b50505050611148611c88565b8582611154919061305b565b111561118c576040517f098fb56100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca6787876000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686608001516000800160149054906101000a900460020b60405161122c95949392919061329e565b60405180910390a3505050965096945050505050565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a9004600f0b905083565b6000808560008660020b60020b8152602001908152602001600020905060008160000160019054906101000a90046fffffffffffffffffffffffffffffffff16905060006112f08287611ba9565b90506000826fffffffffffffffffffffffffffffffff161415156000826fffffffffffffffffffffffffffffffff16141515141593506000826fffffffffffffffffffffffffffffffff160361135e5760018360000160006101000a81548160ff0219169083151502179055505b808360000160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550846113c65785600f0b8360010160009054906101000a9004600f0b600f0b6113c191906132f1565b6113ea565b85600f0b8360010160009054906101000a9004600f0b600f0b6113e99190613335565b5b8360010160006101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff160217905550505050949350505050565b6000818361144091906133a7565b60020b1461144d57600080fd5b600080611464838561145f91906133d8565b6123fc565b9150915060008160ff166001901b9050808660008560010b60010b815260200190815260200160002060008282541892505081905550505050505050565b60008460008585856040516020016114bc939291906134c0565b6040516020818303038152906040528051906020012081526020019081526020016000209050949350505050565b60008260000160009054906101000a90046fffffffffffffffffffffffffffffffff1690506000828261151d91906134fd565b9050808460000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b60008060008360020b12611577578260020b611585565b8260020b611584906131ab565b5b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186115b190612f75565b62ffffff168111156115f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ef9061359e565b60405180910390fd5b600080600183160361161b5770010000000000000000000000000000000061162d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600060028316146116705760806ffff97272373d413259a46990580e213a8261166b91906135be565b901c90505b6000600483161461169e5760806ffff2e50f5f656932ef12357cf3c7fdcc8261169991906135be565b901c90505b600060088316146116cc5760806fffe5caca7e10e4e61c3624eaa0941cd0826116c791906135be565b901c90505b600060108316146116fa5760806fffcb9843d60f6159c9db58835c926644826116f591906135be565b901c90505b600060208316146117285760806fff973b41fa98c081472e6896dfb254c08261172391906135be565b901c90505b600060408316146117565760806fff2ea16466c96a3843ec78b326b528618261175191906135be565b901c90505b600060808316146117845760806ffe5dee046a99a2a811c461f1969c30538261177f91906135be565b901c90505b60006101008316146117b35760806ffcbe86c7900a88aedcffc83b479aa3a4826117ae91906135be565b901c90505b60006102008316146117e25760806ff987a7253ac413176f2b074cf7815e54826117dd91906135be565b901c90505b60006104008316146118115760806ff3392b0822b70005940c7a398e4b70f38261180c91906135be565b901c90505b60006108008316146118405760806fe7159475a2c29b7443b29c7fa6e889d98261183b91906135be565b901c90505b600061100083161461186f5760806fd097f3bdfd2022b8845ad8f792aa58258261186a91906135be565b901c90505b600061200083161461189e5760806fa9f746462d870fdf8a65dc1f90e061e58261189991906135be565b901c90505b60006140008316146118cd5760806f70d869a156d2a1b890bb3df62baf32f7826118c891906135be565b901c90505b60006180008316146118fc5760806f31be135f97d08fd981231505542fcfa6826118f791906135be565b901c90505b60006201000083161461192c5760806f09aa508b5b7a84e1c677de54f3e99bc98261192791906135be565b901c90505b60006202000083161461195b5760806e5d6af8dedb81196699c329225ee6048261195691906135be565b901c90505b6000620400008316146119895760806d2216e584f5fa1ea926041bedfe988261198491906135be565b901c90505b6000620800008316146119b55760806b048a170391f7dc42444e8fa2826119b091906135be565b901c90505b60008460020b13156119f057807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6119ed9190613600565b90505b600064010000000082611a039190613631565b14611a0f576001611a12565b60005b60ff16602082901c611a24919061305b565b92505050919050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611a6e57828480945081955050505b60008473ffffffffffffffffffffffffffffffffffffffff1611611a9157600080fd5b611b0b611aef606060ff16846fffffffffffffffffffffffffffffffff16901b8686611abd9190613662565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1661241e565b8573ffffffffffffffffffffffffffffffffffffffff16612489565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115611b5557828480945081955050505b611ba0826fffffffffffffffffffffffffffffffff168585611b779190613662565b73ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061241e565b90509392505050565b60008082600f0b1215611bd25781611bc090613108565b83611bcb91906136aa565b9050611be1565b8183611bde91906134fd565b90505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c429190612a46565b602060405180830381865afa158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c839190613703565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ce39190612a46565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190613703565b905090565b60008060008486611d3a91906133d8565b905060008660020b128015611d5e575060008587611d5891906133a7565b60020b14155b15611d72578080611d6e90613730565b9150505b8315611e3557600080611d84836123fc565b9150915060008160ff166001901b60018360ff166001901b611da691906130d4565b611db0919061305b565b90506000818b60008660010b60010b8152602001908152602001600020541690506000811415955085611dfc57888360ff1686611ded9190613150565b611df79190613778565b611e2a565b88611e068261249c565b84611e1191906137c2565b60ff1686611e1f9190613150565b611e299190613778565b5b965050505050611f0d565b600080611e4d600184611e4891906137f7565b6123fc565b91509150600060018260ff166001901b611e6791906130d4565b1990506000818b60008660010b60010b8152602001908152602001600020541690506000811415955085611ecc57888360ff611ea391906137c2565b60ff16600187611eb391906137f7565b611ebd91906137f7565b611ec79190613778565b611f06565b8883611ed7836125bf565b611ee191906137c2565b60ff16600187611ef191906137f7565b611efb91906137f7565b611f059190613778565b5b9650505050505b5094509492505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161015905080611f6457611f5f888888611b14565b611f70565b611f6f888888611a2d565b5b9250828510611f8157869350611f90565b611f8d8887878461272e565b93505b611f9b888588611a2d565b9250611fa8888588611b14565b915080611fba57818380935081945050505b509450945094915050565b6000808360008460020b60020b815260200190815260200160002090508060010160009054906101000a9004600f0b91505092915050565b60006401000276a373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161015801561207f575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16105b6120be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b59061389e565b60405180910390fd5b600060208373ffffffffffffffffffffffffffffffffffffffff16901b9050600081905060006fffffffffffffffffffffffffffffffff821160071b808217915082811c92505067ffffffffffffffff821160061b808217915082811c92505063ffffffff821160051b808217915082811c92505061ffff821160041b808217915082811c92505060ff821160031b808217915082811c925050600f821160021b808217915082811c9250506003821160011b808217915082811c92505060018211808217915050608081106121a557607f8161219b91906130d4565b83901c91506121b8565b80607f6121b291906130d4565b83901b91505b600060406080836121c99190613335565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b82179150506000693627a301d71055774c858261234c91906138be565b9050600060806f028f6481ab7f045a5af012a19d003aaa8361236e9190613335565b901d9050600060806fdb2df09e81959a81455e260799a0632f8461239291906132f1565b901d90508060020b8260020b146123ec578873ffffffffffffffffffffffffffffffffffffffff166123c382611560565b73ffffffffffffffffffffffffffffffffffffffff1611156123e557816123e7565b805b6123ee565b815b975050505050505050919050565b60008060088360020b901d91506101008361241791906133a7565b9050915091565b600061242b84848461275b565b90506000828061243e5761243d613378565b5b8486091115612482577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811061247357600080fd5b808061247e90613936565b9150505b9392505050565b6000808284061182840401905092915050565b60008082116124aa57600080fd5b70010000000000000000000000000000000082106124d957608082901c91506080816124d6919061397e565b90505b68010000000000000000821061250057604082901c91506040816124fd919061397e565b90505b640100000000821061252357602082901c9150602081612520919061397e565b90505b62010000821061254457601082901c9150601081612541919061397e565b90505b610100821061256457600882901c9150600881612561919061397e565b90505b6010821061258357600482901c9150600481612580919061397e565b90505b600482106125a257600282901c915060028161259f919061397e565b90505b600282106125ba576001816125b7919061397e565b90505b919050565b60008082116125cd57600080fd5b60ff905060006fffffffffffffffffffffffffffffffff801683161115612602576080816125fb91906137c2565b905061260a565b608082901c91505b600067ffffffffffffffff8016831611156126335760408161262c91906137c2565b905061263b565b604082901c91505b600063ffffffff8016831611156126605760208161265991906137c2565b9050612668565b602082901c91505b600061ffff80168316111561268b5760108161268491906137c2565b9050612693565b601082901c91505b600060ff8016831611156126b5576008816126ae91906137c2565b90506126bd565b600882901c91505b6000600f831611156126dd576004816126d691906137c2565b90506126e5565b600482901c91505b6000600383161115612705576002816126fe91906137c2565b905061270d565b600282901c91505b60006001831611156127295760018161272691906137c2565b90505b919050565b60008161274557612740858585612870565b612751565b6127508585856128ab565b5b9050949350505050565b60008060008019858709858702925082811083820303915050600081036127965783828161278c5761278b613378565b5b0492505050612869565b8381106127dc5780846040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004016127d3929190612ca1565b60405180910390fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000826fffffffffffffffffffffffffffffffff16606060ff1683901b6128979190613600565b846128a291906139b3565b90509392505050565b600080606060ff16846fffffffffffffffffffffffffffffffff16901b905060008573ffffffffffffffffffffffffffffffffffffffff16846128ee91906135be565b90508573ffffffffffffffffffffffffffffffffffffffff1684826129139190613600565b0361295c5760008183612926919061305b565b905082811061295a57612950838873ffffffffffffffffffffffffffffffffffffffff168361241e565b9350505050612997565b505b61299282858873ffffffffffffffffffffffffffffffffffffffff16856129839190613600565b61298d919061305b565b612489565b925050505b9392505050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060020b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a3082612a05565b9050919050565b612a4081612a25565b82525050565b6000602082019050612a5b6000830184612a37565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b612a8681612a61565b82525050565b6000602082019050612aa16000830184612a7d565b92915050565b612ab081612a05565b82525050565b60008160020b9050919050565b612acc81612ab6565b82525050565b6000604082019050612ae76000830185612aa7565b612af46020830184612ac3565b9392505050565b600080fd5b600080fd5b612b0e81612a25565b8114612b1957600080fd5b50565b600081359050612b2b81612b05565b92915050565b612b3a81612ab6565b8114612b4557600080fd5b50565b600081359050612b5781612b31565b92915050565b612b6681612a61565b8114612b7157600080fd5b50565b600081359050612b8381612b5d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612bae57612bad612b89565b5b8235905067ffffffffffffffff811115612bcb57612bca612b8e565b5b602083019150836001820283011115612be757612be6612b93565b5b9250929050565b60008060008060008060a08789031215612c0b57612c0a612afb565b5b6000612c1989828a01612b1c565b9650506020612c2a89828a01612b48565b9550506040612c3b89828a01612b48565b9450506060612c4c89828a01612b74565b935050608087013567ffffffffffffffff811115612c6d57612c6c612b00565b5b612c7989828a01612b98565b92509250509295509295509295565b6000819050919050565b612c9b81612c88565b82525050565b6000604082019050612cb66000830185612c92565b612cc36020830184612c92565b9392505050565b60008160010b9050919050565b612ce081612cca565b8114612ceb57600080fd5b50565b600081359050612cfd81612cd7565b92915050565b600060208284031215612d1957612d18612afb565b5b6000612d2784828501612cee565b91505092915050565b6000602082019050612d456000830184612c92565b92915050565b60008115159050919050565b612d6081612d4b565b8114612d6b57600080fd5b50565b600081359050612d7d81612d57565b92915050565b612d8c81612c88565b8114612d9757600080fd5b50565b600081359050612da981612d83565b92915050565b612db881612a05565b8114612dc357600080fd5b50565b600081359050612dd581612daf565b92915050565b60008060008060008060a08789031215612df857612df7612afb565b5b6000612e0689828a01612b1c565b9650506020612e1789828a01612d6e565b9550506040612e2889828a01612d9a565b9450506060612e3989828a01612dc6565b935050608087013567ffffffffffffffff811115612e5a57612e59612b00565b5b612e6689828a01612b98565b92509250509295509295509295565b6000819050919050565b612e8881612e75565b82525050565b6000604082019050612ea36000830185612e7f565b612eb06020830184612e7f565b9392505050565b600060208284031215612ecd57612ecc612afb565b5b6000612edb84828501612b48565b91505092915050565b612eed81612d4b565b82525050565b600081600f0b9050919050565b612f0981612ef3565b82525050565b6000606082019050612f246000830186612ee4565b612f316020830185612a7d565b612f3e6040830184612f00565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f8082612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203612fb257612fb1612f46565b5b816000039050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612ffa8385612fbd565b9350613007838584612fce565b61301083612fdd565b840190509392505050565b60006060820190506130306000830187612c92565b61303d6020830186612c92565b8181036040830152613050818486612fee565b905095945050505050565b600061306682612c88565b915061307183612c88565b925082820190508082111561308957613088612f46565b5b92915050565b60006080820190506130a46000830187612a37565b6130b16020830186612a7d565b6130be6040830185612c92565b6130cb6060830184612c92565b95945050505050565b60006130df82612c88565b91506130ea83612c88565b925082820390508181111561310257613101612f46565b5b92915050565b600061311382612ef3565b91507fffffffffffffffffffffffffffffffff80000000000000000000000000000000820361314557613144612f46565b5b816000039050919050565b600061315b82612ab6565b915061316683612ab6565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000821217156131a5576131a4612f46565b5b92915050565b60006131b682612e75565b91507f800000000000000000000000000000000000000000000000000000000000000082036131e8576131e7612f46565b5b816000039050919050565b60006040820190506132086000830185612a37565b6132156020830184612c92565b9392505050565b60008151905061322b81612d57565b92915050565b60006020828403121561324757613246612afb565b5b60006132558482850161321c565b91505092915050565b60006060820190506132736000830187612e7f565b6132806020830186612e7f565b8181036040830152613293818486612fee565b905095945050505050565b600060a0820190506132b36000830188612e7f565b6132c06020830187612e7f565b6132cd6040830186612aa7565b6132da6060830185612a7d565b6132e76080830184612ac3565b9695505050505050565b60006132fc82612e75565b915061330783612e75565b92508282019050828112156000831216838212600084121516171561332f5761332e612f46565b5b92915050565b600061334082612e75565b915061334b83612e75565b925082820390508181126000841216828213600085121516171561337257613371612f46565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133b282612ab6565b91506133bd83612ab6565b9250826133cd576133cc613378565b5b828207905092915050565b60006133e382612ab6565b91506133ee83612ab6565b9250826133fe576133fd613378565b5b600160000383147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008314161561343757613436612f46565b5b828205905092915050565b60008160601b9050919050565b600061345a82613442565b9050919050565b600061346c8261344f565b9050919050565b61348461347f82612a25565b613461565b82525050565b60008160e81b9050919050565b60006134a28261348a565b9050919050565b6134ba6134b582612ab6565b613497565b82525050565b60006134cc8286613473565b6014820191506134dc82856134a9565b6003820191506134ec82846134a9565b600382019150819050949350505050565b600061350882612a61565b915061351383612a61565b925082820190506fffffffffffffffffffffffffffffffff81111561353b5761353a612f46565b5b92915050565b600082825260208201905092915050565b7f5400000000000000000000000000000000000000000000000000000000000000600082015250565b6000613588600183613541565b915061359382613552565b602082019050919050565b600060208201905081810360008301526135b78161357b565b9050919050565b60006135c982612c88565b91506135d483612c88565b92508282026135e281612c88565b915082820484148315176135f9576135f8612f46565b5b5092915050565b600061360b82612c88565b915061361683612c88565b92508261362657613625613378565b5b828204905092915050565b600061363c82612c88565b915061364783612c88565b92508261365757613656613378565b5b828206905092915050565b600061366d82612a05565b915061367883612a05565b9250828203905073ffffffffffffffffffffffffffffffffffffffff8111156136a4576136a3612f46565b5b92915050565b60006136b582612a61565b91506136c083612a61565b925082820390506fffffffffffffffffffffffffffffffff8111156136e8576136e7612f46565b5b92915050565b6000815190506136fd81612d83565b92915050565b60006020828403121561371957613718612afb565b5b6000613727848285016136ee565b91505092915050565b600061373b82612ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000820361376d5761376c612f46565b5b600182039050919050565b600061378382612ab6565b915061378e83612ab6565b925082820261379c81612ab6565b91508082146137ae576137ad612f46565b5b5092915050565b600060ff82169050919050565b60006137cd826137b5565b91506137d8836137b5565b9250828203905060ff8111156137f1576137f0612f46565b5b92915050565b600061380282612ab6565b915061380d83612ab6565b925082820190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561384c5761384b612f46565b5b92915050565b7f5200000000000000000000000000000000000000000000000000000000000000600082015250565b6000613888600183613541565b915061389382613852565b602082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b60006138c982612e75565b91506138d483612e75565b92508282026138e281612e75565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561391a57613919612f46565b5b828205841483151761392f5761392e612f46565b5b5092915050565b600061394182612c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361397357613972612f46565b5b600182019050919050565b6000613989826137b5565b9150613994836137b5565b9250828201905060ff8111156139ad576139ac612f46565b5b92915050565b60006139be82612a05565b91506139c983612a05565b9250828201905073ffffffffffffffffffffffffffffffffffffffff8111156139f5576139f4612f46565b5b9291505056fea2646970667358221220cfd952fc5fdd41b2bfa3d34757552773b6be331d0a1bbe921963713912cf6a6464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swap(address,bool,uint256,uint160,bytes)": {
        "params": {
          "amountSpecified": "用户希望卖出的 token 数量",
          "sqrtPriceLimitX96": "滑点保护，当 zeroForOne 为 true 时，交易的价格不能低于 sqrtPriceLimitX96；当 zeroForOne 为 false 时，交易的价格不能高于 sqrtPriceLimitX96",
          "zeroForOne": "用来控制交易方向的 flag：当设置为 true，是用 token0 兑换 token1；false 则相反。例如，如果 token0 是ETH，token1 是USDC，将 zeroForOne 设置为 true 意味着用 ETH 购买 USDC"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 437,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "slot0",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Slot0)434_storage"
      },
      {
        "astId": 439,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "liquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 444,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "ticks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_int24,t_struct(Info)2359_storage)"
      },
      {
        "astId": 448,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "tickBitmap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_int16,t_uint256)"
      },
      {
        "astId": 453,
        "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
        "label": "positions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Info)2196_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_bytes32,t_struct(Info)2196_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Position.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)2196_storage"
      },
      "t_mapping(t_int16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_int16",
        "label": "mapping(int16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int24,t_struct(Info)2359_storage)": {
        "encoding": "mapping",
        "key": "t_int24",
        "label": "mapping(int24 => struct Tick.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)2359_storage"
      },
      "t_struct(Info)2196_storage": {
        "encoding": "inplace",
        "label": "struct Position.Info",
        "members": [
          {
            "astId": 2195,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "liquidity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Info)2359_storage": {
        "encoding": "inplace",
        "label": "struct Tick.Info",
        "members": [
          {
            "astId": 2354,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2356,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "liquidityGross",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2358,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "liquidityNet",
            "offset": 0,
            "slot": "1",
            "type": "t_int128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Slot0)434_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV3Pool.Slot0",
        "members": [
          {
            "astId": 431,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "sqrtPriceX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 433,
            "contract": "contracts/UniswapV3Pool.sol:UniswapV3Pool",
            "label": "tick",
            "offset": 20,
            "slot": "0",
            "type": "t_int24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}