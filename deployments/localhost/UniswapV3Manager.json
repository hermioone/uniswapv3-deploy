{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3MintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa189ad2af9dfbd1f12db5ba21deefa1585d625cc90fa8eb941fe854b0b898313",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "694717",
    "logsBloom": "0x
    "blockHash": "0xf10d9441fe5c2eb076ae94f254fec4246185d4f42734567e925a4e2efa04575c",
    "transactionHash": "0xa189ad2af9dfbd1f12db5ba21deefa1585d625cc90fa8eb941fe854b0b898313",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "694717",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0d8ceb34b3cee23e42dfb6972d99413",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Manager.sol\":\"UniswapV3Manager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/UniswapV3Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./UniswapV3Pool.sol\\\";\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\n\\ncontract UniswapV3Manager is IUniswapV3MintCallback, IUniswapV3SwapCallback {\\n    \\n    function mint(\\n        address poolAddress_, \\n        int24 lowerTick, \\n        int24 upperTick, \\n        uint128 liquidity, \\n        bytes calldata data\\n    ) public {\\n        UniswapV3Pool(poolAddress_).mint(\\n            msg.sender,\\n            lowerTick,\\n            upperTick,\\n            liquidity,\\n            data\\n        );\\n    }\\n\\n    function swap(\\n        address poolAddress_,\\n        bytes calldata data\\n    ) public {\\n        UniswapV3Pool(poolAddress_).swap(msg.sender, data);\\n    }\\n\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) override external {\\n        UniswapV3Pool.CallbackData memory extra = abi.decode(data, (UniswapV3Pool.CallbackData));\\n\\n        // \\u589e\\u52a0\\u6d41\\u52a8\\u6027\\u7684\\u56de\\u8c03\\uff0c\\u6240\\u4ee5 amount0 \\u548c amount1 \\u90fd\\u662f > 0\\n        IERC20(extra.token0).transferFrom(extra.payer, msg.sender, amount0);\\n        IERC20(extra.token1).transferFrom(extra.payer, msg.sender, amount1);\\n    }\\n\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) override external {\\n        UniswapV3Pool.CallbackData memory extra = abi.decode(data, (UniswapV3Pool.CallbackData));\\n\\n        // \\u4ea4\\u6613\\u7684\\u56de\\u8c03\\u51fd\\u6570\\uff0c\\u6240\\u4ee5 amount0 > 0 \\u65f6 amount1 < 0\\uff0c\\u6216\\u8005 amount0 < 0 \\u65f6 amount1 > 0\\n        if (amount0 > 0) {\\n            // \\u610f\\u5473\\u7740\\u9700\\u8981\\u8c03\\u7528\\u8005\\u8f6c\\u8d26 amount0 \\u7684 token0 \\u7ed9 uniswapv3\\n            IERC20(extra.token0).transferFrom(extra.payer, msg.sender, uint256(amount0));\\n        }\\n        if (amount1 > 0) {\\n            IERC20(extra.token1).transferFrom(extra.payer, msg.sender, uint256(amount1));\\n        }\\n    }\\n}\",\"keccak256\":\"0x7568a8305cda09def50be90e2cf51772d94b06b7f84e305856ac4349e5bf27ab\",\"license\":\"MIT\"},\"contracts/UniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/Position.sol\\\";\\nimport \\\"./lib/Tick.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\n\\n\\ncontract UniswapV3Pool {\\n\\n    error InvalidTickRange();\\n    error ZeroLiquidity();\\n    error InsufficientInputAmount();\\n\\n    event Mint(address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1);\\n    event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick);\\n\\n    using Tick for mapping(int24 => Tick.Info);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    int24 internal constant MIN_TICK = -887272;\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    struct CallbackData {\\n        address token0;\\n        address token1;\\n        address payer;\\n    }\\n\\n    struct Slot0 {\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d tick\\n        int24 tick;\\n    }\\n    Slot0 public slot0;\\n\\n    // \\u603b\\u7684\\u6d41\\u52a8\\u6027\\n    uint128 public liquidity;\\n\\n    mapping(int24 => Tick.Info) public ticks;\\n    mapping(bytes32 => Position.Info) positions;\\n\\n    constructor(\\n        address token0_,\\n        address token1_,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    ) {\\n        token0 = token0_;\\n        token1 = token1_;\\n\\n        slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick});\\n    }\\n\\n    // \\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        if (lowerTick >= upperTick || lowerTick < MIN_TICK || upperTick > MAX_TICK) {\\n            revert InvalidTickRange();\\n        }\\n        if (amount <= 0) {\\n            revert ZeroLiquidity();\\n        }\\n\\n        // \\u66f4\\u65b0\\u4e0a\\u4e0b\\u8fb9\\u754c\\u7684 liquidity\\n        ticks.update(lowerTick, amount);\\n        ticks.update(upperTick, amount);\\n\\n        Position.Info storage position = positions.get(owner, lowerTick, upperTick);\\n        position.update(amount);\\n\\n        // TODO \\u6839\\u636e amount \\u548c sqrtPriceX96 \\u8ba1\\u7b97 amount0 \\u548c amount1\\n        amount0 = 0.998976618347425280 ether;\\n        amount1 = 5000 ether;\\n\\n        liquidity += uint128(amount);\\n\\n        // \\u8c03\\u7528\\u56de\\u8c03\\u51fd\\u6570\\u8f6c\\u8d26\\uff0c\\u8f6c\\u8d26\\u91d1\\u989d\\u4e3a amount0 \\u548c amount1\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) {\\n            balance0Before = balance0();\\n        }\\n        if (amount1 > 0) {\\n            balance1Before = balance1();\\n        }\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0 && balance0Before + amount0 > balance0()) {\\n            revert InsufficientInputAmount();\\n        }\\n        if (amount1 > 0 && balance1Before + amount1 > balance1()) {\\n            revert InsufficientInputAmount();\\n        }\\n        emit Mint(msg.sender, owner, lowerTick, upperTick, amount, amount0, amount1);\\n    }\\n\\n    function swap(address recipient, bytes calldata data) public returns (int256 amount0, int256 amount1) {\\n\\n        // TODO \\u9700\\u8981\\u628a\\u8fd9\\u4e9b\\u786c\\u7f16\\u7801\\u7684\\u66ff\\u6362\\u4e3a\\u8ba1\\u7b97\\n        int24 nextTick = 85184;\\n        uint160 nextPrice = 5604469350942327889444743441197;\\n        amount0 = -0.008396714242162444 ether;\\n        amount1 = 42 ether;\\n\\n        (slot0.tick, slot0.sqrtPriceX96) = (nextTick, nextPrice);\\n\\n        IERC20(token0).transfer(recipient, uint256(-amount0));\\n        uint256 balance1Before = balance1();\\n        IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\\n        if (balance1Before + uint256(amount1) > balance1()) {\\n            revert InsufficientInputAmount();\\n        }\\n\\n        emit Swap(msg.sender, recipient, amount0, amount1, slot0.sqrtPriceX96, liquidity, slot0.tick);\\n    }\\n\\n    function balance0() internal view returns (uint256) {\\n        return IERC20(token0).balanceOf(address(this));\\n    }\\n\\n    function balance1() internal view returns (uint256) {\\n        return IERC20(token1).balanceOf(address(this));\\n    }\\n}\",\"keccak256\":\"0x62fc1c13f9229ba5564a5ebd42052bb3fca1e9ddb8255fd123ed2ff0c22b3ec8\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3MintCallback {\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x4087b0a14d2737727495263a43d9e2398e1e96287e566715e6442612c6184f0e\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3SwapCallback {\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xc3c54870bbceb41a1de853ae4ed1a073d1e9bf8346e9d563a0f7a6abe1ce3a4e\",\"license\":\"MIT\"},\"contracts/lib/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Position {\\n    struct Info {\\n        uint128 liquidity;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Position.Info) storage self,\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[\\n            keccak256(abi.encodePacked(owner, lowerTick, upperTick))\\n        ];\\n    }\\n\\n    function update(Info storage self, uint128 liquidityDelta) internal {\\n        uint128 liquidityBefore = self.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        self.liquidity = liquidityAfter;\\n    }\\n}\",\"keccak256\":\"0xd0f3469dabe9d8ef81663eed32c35f42d16dd0dec86ac9a8ae1c5a092886baa3\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Tick {\\n    struct Info {\\n        bool initialized;\\n        uint128 liquidity;\\n    }\\n\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint128 liquidityDelta\\n    ) internal {\\n        Tick.Info storage tickInfo = self[tick];\\n        uint128 liquidityBefore = tickInfo.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        if (liquidityBefore == 0) {\\n            tickInfo.initialized = true;\\n        }\\n        tickInfo.liquidity = liquidityAfter;\\n    }\\n}\",\"keccak256\":\"0x5ec3964ba7bc97b5811cf847651a27cf1f33ecc4d39b346eb1c981080b3dbc7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b9d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633c8a7d8d14610051578063d34879971461006d578063e354733514610089578063fa461e33146100a5575b600080fd5b61006b6004803603810190610066919061059a565b6100c1565b005b6100876004803603810190610082919061066a565b610150565b005b6100a3600480360381019061009e91906106de565b61027c565b005b6100bf60048036038101906100ba9190610774565b610302565b005b8573ffffffffffffffffffffffffffffffffffffffff16633c8a7d8d3387878787876040518763ffffffff1660e01b815260040161010496959493929190610873565b60408051808303816000875af1158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906108e4565b5050505050505050565b600082828101906101619190610a08565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b81526004016101a893929190610a44565b6020604051808303816000875af11580156101c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101eb9190610ab3565b50806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b815260040161023193929190610a44565b6020604051808303816000875af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610ab3565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663e35473353384846040518463ffffffff1660e01b81526004016102b993929190610ae0565b60408051808303816000875af11580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610b27565b5050505050565b600082828101906103139190610a08565b905060008513156103a857806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161036393929190610a44565b6020604051808303816000875af1158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610ab3565b505b600084131561043b57806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b81526004016103f693929190610a44565b6020604051808303816000875af1158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610ab3565b505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061048182610456565b9050919050565b61049181610476565b811461049c57600080fd5b50565b6000813590506104ae81610488565b92915050565b60008160020b9050919050565b6104ca816104b4565b81146104d557600080fd5b50565b6000813590506104e7816104c1565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610512816104ed565b811461051d57600080fd5b50565b60008135905061052f81610509565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261055a57610559610535565b5b8235905067ffffffffffffffff8111156105775761057661053a565b5b6020830191508360018202830111156105935761059261053f565b5b9250929050565b60008060008060008060a087890312156105b7576105b661044c565b5b60006105c589828a0161049f565b96505060206105d689828a016104d8565b95505060406105e789828a016104d8565b94505060606105f889828a01610520565b935050608087013567ffffffffffffffff81111561061957610618610451565b5b61062589828a01610544565b92509250509295509295509295565b6000819050919050565b61064781610634565b811461065257600080fd5b50565b6000813590506106648161063e565b92915050565b600080600080606085870312156106845761068361044c565b5b600061069287828801610655565b94505060206106a387828801610655565b935050604085013567ffffffffffffffff8111156106c4576106c3610451565b5b6106d087828801610544565b925092505092959194509250565b6000806000604084860312156106f7576106f661044c565b5b60006107058682870161049f565b935050602084013567ffffffffffffffff81111561072657610725610451565b5b61073286828701610544565b92509250509250925092565b6000819050919050565b6107518161073e565b811461075c57600080fd5b50565b60008135905061076e81610748565b92915050565b6000806000806060858703121561078e5761078d61044c565b5b600061079c8782880161075f565b94505060206107ad8782880161075f565b935050604085013567ffffffffffffffff8111156107ce576107cd610451565b5b6107da87828801610544565b925092505092959194509250565b6107f181610476565b82525050565b610800816104b4565b82525050565b61080f816104ed565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006108528385610815565b935061085f838584610826565b61086883610835565b840190509392505050565b600060a08201905061088860008301896107e8565b61089560208301886107f7565b6108a260408301876107f7565b6108af6060830186610806565b81810360808301526108c2818486610846565b9050979650505050505050565b6000815190506108de8161063e565b92915050565b600080604083850312156108fb576108fa61044c565b5b6000610909858286016108cf565b925050602061091a858286016108cf565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61096182610835565b810181811067ffffffffffffffff821117156109805761097f610929565b5b80604052505050565b6000610993610442565b905061099f8282610958565b919050565b6000606082840312156109ba576109b9610924565b5b6109c46060610989565b905060006109d48482850161049f565b60008301525060206109e88482850161049f565b60208301525060406109fc8482850161049f565b60408301525092915050565b600060608284031215610a1e57610a1d61044c565b5b6000610a2c848285016109a4565b91505092915050565b610a3e81610634565b82525050565b6000606082019050610a5960008301866107e8565b610a6660208301856107e8565b610a736040830184610a35565b949350505050565b60008115159050919050565b610a9081610a7b565b8114610a9b57600080fd5b50565b600081519050610aad81610a87565b92915050565b600060208284031215610ac957610ac861044c565b5b6000610ad784828501610a9e565b91505092915050565b6000604082019050610af560008301866107e8565b8181036020830152610b08818486610846565b9050949350505050565b600081519050610b2181610748565b92915050565b60008060408385031215610b3e57610b3d61044c565b5b6000610b4c85828601610b12565b9250506020610b5d85828601610b12565b915050925092905056fea26469706673582212205703aab287d301cb832a7b134f6a2d4cb3ac8778617eb0ea4d2d0f80e381c5c364736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633c8a7d8d14610051578063d34879971461006d578063e354733514610089578063fa461e33146100a5575b600080fd5b61006b6004803603810190610066919061059a565b6100c1565b005b6100876004803603810190610082919061066a565b610150565b005b6100a3600480360381019061009e91906106de565b61027c565b005b6100bf60048036038101906100ba9190610774565b610302565b005b8573ffffffffffffffffffffffffffffffffffffffff16633c8a7d8d3387878787876040518763ffffffff1660e01b815260040161010496959493929190610873565b60408051808303816000875af1158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906108e4565b5050505050505050565b600082828101906101619190610a08565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b81526004016101a893929190610a44565b6020604051808303816000875af11580156101c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101eb9190610ab3565b50806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b815260040161023193929190610a44565b6020604051808303816000875af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610ab3565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663e35473353384846040518463ffffffff1660e01b81526004016102b993929190610ae0565b60408051808303816000875af11580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610b27565b5050505050565b600082828101906103139190610a08565b905060008513156103a857806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161036393929190610a44565b6020604051808303816000875af1158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610ab3565b505b600084131561043b57806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b81526004016103f693929190610a44565b6020604051808303816000875af1158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610ab3565b505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061048182610456565b9050919050565b61049181610476565b811461049c57600080fd5b50565b6000813590506104ae81610488565b92915050565b60008160020b9050919050565b6104ca816104b4565b81146104d557600080fd5b50565b6000813590506104e7816104c1565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610512816104ed565b811461051d57600080fd5b50565b60008135905061052f81610509565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261055a57610559610535565b5b8235905067ffffffffffffffff8111156105775761057661053a565b5b6020830191508360018202830111156105935761059261053f565b5b9250929050565b60008060008060008060a087890312156105b7576105b661044c565b5b60006105c589828a0161049f565b96505060206105d689828a016104d8565b95505060406105e789828a016104d8565b94505060606105f889828a01610520565b935050608087013567ffffffffffffffff81111561061957610618610451565b5b61062589828a01610544565b92509250509295509295509295565b6000819050919050565b61064781610634565b811461065257600080fd5b50565b6000813590506106648161063e565b92915050565b600080600080606085870312156106845761068361044c565b5b600061069287828801610655565b94505060206106a387828801610655565b935050604085013567ffffffffffffffff8111156106c4576106c3610451565b5b6106d087828801610544565b925092505092959194509250565b6000806000604084860312156106f7576106f661044c565b5b60006107058682870161049f565b935050602084013567ffffffffffffffff81111561072657610725610451565b5b61073286828701610544565b92509250509250925092565b6000819050919050565b6107518161073e565b811461075c57600080fd5b50565b60008135905061076e81610748565b92915050565b6000806000806060858703121561078e5761078d61044c565b5b600061079c8782880161075f565b94505060206107ad8782880161075f565b935050604085013567ffffffffffffffff8111156107ce576107cd610451565b5b6107da87828801610544565b925092505092959194509250565b6107f181610476565b82525050565b610800816104b4565b82525050565b61080f816104ed565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006108528385610815565b935061085f838584610826565b61086883610835565b840190509392505050565b600060a08201905061088860008301896107e8565b61089560208301886107f7565b6108a260408301876107f7565b6108af6060830186610806565b81810360808301526108c2818486610846565b9050979650505050505050565b6000815190506108de8161063e565b92915050565b600080604083850312156108fb576108fa61044c565b5b6000610909858286016108cf565b925050602061091a858286016108cf565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61096182610835565b810181811067ffffffffffffffff821117156109805761097f610929565b5b80604052505050565b6000610993610442565b905061099f8282610958565b919050565b6000606082840312156109ba576109b9610924565b5b6109c46060610989565b905060006109d48482850161049f565b60008301525060206109e88482850161049f565b60208301525060406109fc8482850161049f565b60408301525092915050565b600060608284031215610a1e57610a1d61044c565b5b6000610a2c848285016109a4565b91505092915050565b610a3e81610634565b82525050565b6000606082019050610a5960008301866107e8565b610a6660208301856107e8565b610a736040830184610a35565b949350505050565b60008115159050919050565b610a9081610a7b565b8114610a9b57600080fd5b50565b600081519050610aad81610a87565b92915050565b600060208284031215610ac957610ac861044c565b5b6000610ad784828501610a9e565b91505092915050565b6000604082019050610af560008301866107e8565b8181036020830152610b08818486610846565b9050949350505050565b600081519050610b2181610748565b92915050565b60008060408385031215610b3e57610b3d61044c565b5b6000610b4c85828601610b12565b9250506020610b5d85828601610b12565b915050925092905056fea26469706673582212205703aab287d301cb832a7b134f6a2d4cb3ac8778617eb0ea4d2d0f80e381c5c364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}