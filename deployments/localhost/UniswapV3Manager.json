{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountSpecified",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3MintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52779a489adc3a1ac79c7f6b372c82e52c20dda9eed702ede3a4456961b3077c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "736828",
    "logsBloom": "0x
    "blockHash": "0xca79c24978e01bb1c3d5bfa5456d664812361f5da3cb77363e4fc4c179a36149",
    "transactionHash": "0x52779a489adc3a1ac79c7f6b372c82e52c20dda9eed702ede3a4456961b3077c",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "736828",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b6f283a0fa56e024719514000d12753a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Manager.sol\":\"UniswapV3Manager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/UniswapV3Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./UniswapV3Pool.sol\\\";\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\n\\ncontract UniswapV3Manager is IUniswapV3MintCallback, IUniswapV3SwapCallback {\\n    \\n    function mint(\\n        address poolAddress_, \\n        int24 lowerTick, \\n        int24 upperTick, \\n        uint128 liquidity, \\n        bytes calldata data\\n    ) public {\\n        UniswapV3Pool(poolAddress_).mint(\\n            msg.sender,\\n            lowerTick,\\n            upperTick,\\n            liquidity,\\n            data\\n        );\\n    }\\n\\n    function swap(\\n        address poolAddress_,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        bytes calldata data\\n    ) public returns (int256, int256) {\\n        return\\n            UniswapV3Pool(poolAddress_).swap(\\n                msg.sender,\\n                zeroForOne,\\n                amountSpecified,\\n                data\\n            );\\n    }\\n\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) override external {\\n        UniswapV3Pool.CallbackData memory extra = abi.decode(data, (UniswapV3Pool.CallbackData));\\n\\n        // \\u589e\\u52a0\\u6d41\\u52a8\\u6027\\u7684\\u56de\\u8c03\\uff0c\\u6240\\u4ee5 amount0 \\u548c amount1 \\u90fd\\u662f > 0\\n        IERC20(extra.token0).transferFrom(extra.payer, msg.sender, amount0);\\n        IERC20(extra.token1).transferFrom(extra.payer, msg.sender, amount1);\\n    }\\n\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) override external {\\n        UniswapV3Pool.CallbackData memory extra = abi.decode(data, (UniswapV3Pool.CallbackData));\\n\\n        // \\u4ea4\\u6613\\u7684\\u56de\\u8c03\\u51fd\\u6570\\uff0c\\u6240\\u4ee5 amount0 > 0 \\u65f6 amount1 < 0\\uff0c\\u6216\\u8005 amount0 < 0 \\u65f6 amount1 > 0\\n        if (amount0 > 0) {\\n            // \\u610f\\u5473\\u7740\\u9700\\u8981\\u8c03\\u7528\\u8005\\u8f6c\\u8d26 amount0 \\u7684 token0 \\u7ed9 uniswapv3\\n            IERC20(extra.token0).transferFrom(extra.payer, msg.sender, uint256(amount0));\\n        }\\n        if (amount1 > 0) {\\n            IERC20(extra.token1).transferFrom(extra.payer, msg.sender, uint256(amount1));\\n        }\\n    }\\n}\",\"keccak256\":\"0xff58243996f601b9324b14af549b29ede5cfa365abec9efd7f30fc6ce8d573c3\",\"license\":\"MIT\"},\"contracts/UniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/Position.sol\\\";\\nimport \\\"./lib/Tick.sol\\\";\\nimport \\\"./lib/TickBitMap.sol\\\";\\nimport \\\"./lib/Math.sol\\\";\\nimport \\\"./lib/TickMath.sol\\\";\\nimport \\\"./lib/SwapMath.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapCallback.sol\\\";\\n\\ncontract UniswapV3Pool {\\n    error InvalidTickRange();\\n    error ZeroLiquidity();\\n    error InsufficientInputAmount(string tokenName, uint256 expected, uint256 actual);\\n\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    event Log(uint256 amount0, uint256 amount1);\\n\\n    using Tick for mapping(int24 => Tick.Info);\\n    using TickBitmap for mapping(int16 => uint256);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n\\n    int24 internal constant MIN_TICK = -887272;\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    struct CallbackData {\\n        address token0;\\n        address token1;\\n        address payer;\\n    }\\n\\n    // \\u5f53\\u524d swap \\u7684\\u72b6\\u6001\\n    struct SwapState {\\n        // \\u5f85\\u4ea4\\u6362\\u7684 tokenIn \\u7684\\u91d1\\u989d\\n        uint256 amountSpecifiedRemaining;\\n        // \\u5df2\\u4ea4\\u6362\\u7684 tokenOut \\u7684\\u91d1\\u989d\\n        uint256 amountCalculated;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d swap \\u4ea4\\u6613\\u7ed3\\u675f\\u540e\\u7684 tick\\n        int24 tick;\\n    }\\n\\n    // \\u7ef4\\u62a4\\u5f53\\u524d\\u4ea4\\u6613\\u201d\\u4e00\\u6b65\\u201c\\u7684\\u72b6\\u6001\\n    struct StepState {\\n        // \\u5faa\\u73af\\u5f00\\u59cb\\u65f6\\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceStartX96;\\n        // \\u80fd\\u591f\\u4e3a\\u4ea4\\u6613\\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\u7684\\u4e0b\\u4e00\\u4e2a\\u5df2\\u521d\\u59cb\\u5316\\u7684tick\\n        int24 nextTick;\\n        // \\u4e0b\\u4e00\\u4e2a tick \\u7684\\u4ef7\\u683c\\n        uint160 sqrtPriceNextX96;\\n        // amountIn \\u548c amountOut \\u662f\\u5f53\\u524d\\u5faa\\u73af\\u4e2d\\u6d41\\u52a8\\u6027\\u80fd\\u591f\\u63d0\\u4f9b\\u7684\\u6570\\u91cf\\n        uint256 amountIn;\\n        uint256 amountOut;\\n    }\\n\\n    struct Slot0 {\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n        // \\u5f53\\u524d tick\\n        int24 tick;\\n    }\\n    Slot0 public slot0;\\n\\n    // \\u603b\\u7684\\u6d41\\u52a8\\u6027\\n    uint128 public liquidity;\\n\\n    mapping(int24 => Tick.Info) public ticks;\\n    // tick \\u7684\\u4f4d\\u56fe\\uff0ctick\\u662f int24\\uff0824bit\\u7684int\\uff09\\uff0ctick\\u7684\\u524d16\\u4f4d\\u662f key\\uff0c\\u7528\\u4e8e\\u4ece map \\u4e2d\\u627e\\u5230\\u5bf9\\u5e94\\u7684 value\\uff08\\u4f4d\\u56fe\\uff09\\n    // tick\\u7684\\u540e8\\u4f4d\\u662f\\u4f4d\\u56fe\\u7684key\\uff0c2 ** 8 \\u7684\\u8303\\u56f4\\u4e3a [0, 255]\\uff0c\\u8868\\u793a value \\u4e2d\\u54ea\\u4e00\\u4e2a\\u4f4d\\n    mapping(int16 => uint256) public tickBitmap;\\n    mapping(bytes32 => Position.Info) positions;\\n\\n    constructor(\\n        address token0_,\\n        address token1_,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    ) {\\n        token0 = token0_;\\n        token1 = token1_;\\n\\n        slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick});\\n    }\\n\\n    // \\u63d0\\u4f9b\\u6d41\\u52a8\\u6027\\n    function mint(\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        emit Log(0, 0);\\n        if (lowerTick >= upperTick || lowerTick < MIN_TICK || upperTick > MAX_TICK) {\\n            revert InvalidTickRange();\\n        }\\n        if (amount <= 0) {\\n            revert ZeroLiquidity();\\n        }\\n\\n        // \\u66f4\\u65b0\\u4e0a\\u4e0b\\u8fb9\\u754c\\u7684 liquidity\\n        bool flippedLower = ticks.update(lowerTick, amount);\\n        bool flippedUpper = ticks.update(upperTick, amount);\\n        if (flippedLower) {\\n            tickBitmap.flipTick(lowerTick, 1);\\n        }\\n\\n        if (flippedUpper) {\\n            tickBitmap.flipTick(upperTick, 1);\\n        }\\n\\n        Position.Info storage position = positions.get(owner, lowerTick, upperTick);\\n        position.update(amount);\\n\\n        // amount0 = 0.998976618347425280 ether;\\n        // amount1 = 5000 ether;\\n\\n        amount0 = Math.calcAmount0Delta(\\n            TickMath.getSqrtRatioAtTick(slot0.tick),\\n            TickMath.getSqrtRatioAtTick(upperTick),\\n            amount\\n        );\\n\\n        amount1 = Math.calcAmount1Delta(\\n            TickMath.getSqrtRatioAtTick(slot0.tick),\\n            TickMath.getSqrtRatioAtTick(lowerTick),\\n            amount\\n        );\\n        emit Log(amount0, amount1);\\n\\n        liquidity += uint128(amount);\\n\\n        // \\u8c03\\u7528\\u56de\\u8c03\\u51fd\\u6570\\u8f6c\\u8d26\\uff0c\\u8f6c\\u8d26\\u91d1\\u989d\\u4e3a amount0 \\u548c amount1\\n        uint256 balance0Before;\\n        uint256 balance1Before;\\n        if (amount0 > 0) {\\n            balance0Before = balance0();\\n        }\\n        if (amount1 > 0) {\\n            balance1Before = balance1();\\n        }\\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\\n        if (amount0 > 0 && balance0Before + amount0 > balance0()) {\\n            revert InsufficientInputAmount(\\\"token0\\\", amount0, (balance0() - balance0Before));\\n        }\\n        if (amount1 > 0 && balance1Before + amount1 > balance1()) {\\n            revert InsufficientInputAmount(\\\"token1\\\", amount1, (balance1() - balance1Before));\\n        }\\n        emit Mint(msg.sender, owner, lowerTick, upperTick, amount, amount0, amount1);\\n    }\\n\\n    /// @param zeroForOne \\u7528\\u6765\\u63a7\\u5236\\u4ea4\\u6613\\u65b9\\u5411\\u7684 flag\\uff1a\\u5f53\\u8bbe\\u7f6e\\u4e3a true\\uff0c\\u662f\\u7528 token0 \\u5151\\u6362 token1\\uff1bfalse \\u5219\\u76f8\\u53cd\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c token0 \\u662fETH\\uff0ctoken1 \\u662fUSDC\\uff0c\\u5c06 zeroForOne \\u8bbe\\u7f6e\\u4e3a true \\u610f\\u5473\\u7740\\u7528 ETH \\u8d2d\\u4e70 USDC\\n    /// @param amountSpecified \\u7528\\u6237\\u5e0c\\u671b\\u5356\\u51fa\\u7684 token \\u6570\\u91cf\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        uint256 amountSpecified,\\n        bytes calldata data\\n    ) public returns (int256 amount0, int256 amount1) {\\n        // TODO \\u9700\\u8981\\u628a\\u8fd9\\u4e9b\\u786c\\u7f16\\u7801\\u7684\\u66ff\\u6362\\u4e3a\\u8ba1\\u7b97\\n        int24 nextTick = 85184;\\n        uint160 nextPrice = 5604469350942327889444743441197;\\n        amount0 = -0.008396714242162444 ether;\\n        amount1 = 42 ether;\\n\\n        Slot0 memory slot0_ = slot0;\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: slot0_.sqrtPriceX96,\\n            tick: slot0_.tick\\n        });\\n\\n        // TODO \\u5728\\u8fd9\\u4e2a while \\u5faa\\u73af\\u4e2d liquidity \\u5e76\\u6ca1\\u6709\\u53d1\\u751f\\u6539\\u53d8\\uff0c\\u6240\\u4ee5\\u8fd9\\u91cc\\u53d1\\u751f\\u7684\\u4ea4\\u6613\\u8fd8\\u662f\\u5c40\\u9650\\u5728\\u4e00\\u4e2a tick \\u5185\\u7684\\n        // \\u5e76\\u6ca1\\u6709\\u8de8 tick\\n        while (state.amountSpecifiedRemaining > 0) {\\n            StepState memory step;\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n            (step.nextTick, ) = tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                1,\\n                zeroForOne\\n            );\\n            // \\u8ba1\\u7b97\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.nextTick);\\n\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut) = SwapMath\\n                .computeSwapStep(\\n                    step.sqrtPriceStartX96,\\n                    step.sqrtPriceNextX96,\\n                    liquidity,\\n                    state.amountSpecifiedRemaining\\n                );\\n\\n            state.amountSpecifiedRemaining -= step.amountIn;\\n            state.amountCalculated += step.amountOut;\\n            state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n        }\\n\\n        (amount0, amount1) = zeroForOne\\n            ? (\\n                int256(amountSpecified - state.amountSpecifiedRemaining),\\n                -int256(state.amountCalculated)\\n            )\\n            : (\\n                -int256(state.amountCalculated),\\n                int256(amountSpecified - state.amountSpecifiedRemaining)\\n            );\\n\\n        if (zeroForOne) {\\n            IERC20(token1).transfer(recipient, uint256(-amount1));\\n\\n            uint256 balance0Before = balance0();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance0Before + uint256(amount0) > balance0())\\n                revert InsufficientInputAmount(\\\"token0\\\", uint256(amount0), (balance0() - balance0Before));\\n        } else {\\n            IERC20(token0).transfer(recipient, uint256(-amount0));\\n\\n            uint256 balance1Before = balance1();\\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(\\n                amount0,\\n                amount1,\\n                data\\n            );\\n            if (balance1Before + uint256(amount1) > balance1())\\n                revert InsufficientInputAmount(\\\"token1\\\", uint256(amount1), (balance1() - balance1Before));\\n        }\\n\\n        emit Swap(\\n            msg.sender,\\n            recipient,\\n            amount0,\\n            amount1,\\n            slot0.sqrtPriceX96,\\n            liquidity,\\n            slot0.tick\\n        );\\n    }\\n\\n    function balance0() internal view returns (uint256) {\\n        return IERC20(token0).balanceOf(address(this));\\n    }\\n\\n    function balance1() internal view returns (uint256) {\\n        return IERC20(token1).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae3b40e8138ff39bcb1a5a82df1e735e5a0dcf72e017d92518f5a808f2e5c452\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3MintCallback {\\n    function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0x4087b0a14d2737727495263a43d9e2398e1e96287e566715e6442612c6184f0e\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IUniswapV3SwapCallback {\\n    function uniswapV3SwapCallback(int256 amount0, int256 amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xc3c54870bbceb41a1de853ae4ed1a073d1e9bf8346e9d563a0f7a6abe1ce3a4e\",\"license\":\"MIT\"},\"contracts/lib/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x35398e97c656b7e313e9f4aebf45dff850f5762c153c1099f1efb622764d3e0a\",\"license\":\"MIT\"},\"contracts/lib/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 2**96;\\n}\",\"keccak256\":\"0xe196a278342dc0a6d17851f211aada0e6a4b7b4397ec2cbc62b4938a08523496\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./FixedPoint96.sol\\\";\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\\n\\nlibrary Math {\\n    /// @notice Calculates amount0 delta between two prices\\n    function calcAmount0Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        require(sqrtPriceAX96 > 0);\\n\\n        amount0 = divRoundingUp(\\n            mulDivRoundingUp(\\n                (uint256(liquidity) << FixedPoint96.RESOLUTION),\\n                (sqrtPriceBX96 - sqrtPriceAX96),\\n                sqrtPriceBX96\\n            ),\\n            sqrtPriceAX96\\n        );\\n    }\\n\\n    /// @notice Calculates amount1 delta between two prices\\n    /// TODO: round down when removing liquidity\\n    function calcAmount1Delta(\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96)\\n            (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        amount1 = mulDivRoundingUp(\\n            liquidity,\\n            (sqrtPriceBX96 - sqrtPriceAX96),\\n            FixedPoint96.Q96\\n        );\\n    }\\n\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtPriceNextX96) {\\n        sqrtPriceNextX96 = zeroForOne\\n            ? getNextSqrtPriceFromAmount0RoundingUp(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            )\\n            : getNextSqrtPriceFromAmount1RoundingDown(\\n                sqrtPriceX96,\\n                liquidity,\\n                amountIn\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        uint256 numerator = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 product = amountIn * sqrtPriceX96;\\n\\n        // If product doesn't overflow, use the precise formula.\\n        if (product / amountIn == sqrtPriceX96) {\\n            uint256 denominator = numerator + product;\\n            if (denominator >= numerator) {\\n                return\\n                    uint160(\\n                        mulDivRoundingUp(numerator, sqrtPriceX96, denominator)\\n                    );\\n            }\\n        }\\n\\n        // If product overflows, use a less precise formula.\\n        return\\n            uint160(\\n                divRoundingUp(numerator, (numerator / sqrtPriceX96) + amountIn)\\n            );\\n    }\\n\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        uint256 amountIn\\n    ) internal pure returns (uint160) {\\n        return\\n            sqrtPriceX96 +\\n            uint160((amountIn << FixedPoint96.RESOLUTION) / liquidity);\\n    }\\n\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n\\n    function divRoundingUp(uint256 numerator, uint256 denominator)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        assembly {\\n            result := add(\\n                div(numerator, denominator),\\n                gt(mod(numerator, denominator), 0)\\n            )\\n        }\\n    }\\n}\",\"keccak256\":\"0x361c51ceeb298dea355d2de30dc4d382142d2b38f4c16391dd98cf739bf018e0\",\"license\":\"MIT\"},\"contracts/lib/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Position {\\n    struct Info {\\n        uint128 liquidity;\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Position.Info) storage self,\\n        address owner,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[\\n            keccak256(abi.encodePacked(owner, lowerTick, upperTick))\\n        ];\\n    }\\n\\n    function update(Info storage self, uint128 liquidityDelta) internal {\\n        uint128 liquidityBefore = self.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        self.liquidity = liquidityAfter;\\n    }\\n}\",\"keccak256\":\"0xd0f3469dabe9d8ef81663eed32c35f42d16dd0dec86ac9a8ae1c5a092886baa3\",\"license\":\"MIT\"},\"contracts/lib/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./Math.sol\\\";\\n\\nlibrary SwapMath {\\n    function computeSwapStep(\\n        uint160 sqrtPriceCurrentX96,\\n        uint160 sqrtPriceTargetX96,\\n        uint128 liquidity,\\n        uint256 amountRemaining\\n    )\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceNextX96, uint256 amountIn, uint256 amountOut)\\n    {\\n        bool zeroForOne = sqrtPriceCurrentX96 >= sqrtPriceTargetX96;\\n\\n        sqrtPriceNextX96 = Math.getNextSqrtPriceFromInput(\\n            sqrtPriceCurrentX96,\\n            liquidity,\\n            amountRemaining,\\n            zeroForOne\\n        );\\n\\n        amountIn = Math.calcAmount0Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n        amountOut = Math.calcAmount1Delta(\\n            sqrtPriceCurrentX96,\\n            sqrtPriceNextX96,\\n            liquidity\\n        );\\n\\n        if (!zeroForOne) {\\n            (amountIn, amountOut) = (amountOut, amountIn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb29f9b5c2a6346ce95e27e840d61c658de8b91d961834e54e9d10bacf1dcd3a1\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary Tick {\\n    struct Info {\\n        bool initialized;\\n        uint128 liquidity;\\n    }\\n\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        uint128 liquidityDelta\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage tickInfo = self[tick];\\n        uint128 liquidityBefore = tickInfo.liquidity;\\n        uint128 liquidityAfter = liquidityBefore + liquidityDelta;\\n        if (liquidityBefore == 0) {\\n            tickInfo.initialized = true;\\n        }\\n        tickInfo.liquidity = liquidityAfter;\\n\\n        flipped = (liquidityAfter == 0) != (liquidityBefore == 0);\\n    }\\n}\",\"keccak256\":\"0xc69bf1d3121ff31ed99e609281f665d3f30d054bc0236ba87976ccf6a4844592\",\"license\":\"MIT\"},\"contracts/lib/TickBitMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport './BitMath.sol';\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(uint24(tick % 256));\\n    }\\n\\n    /// \\u7ffb\\u8f6c\\u4f4d\\u56fe\\u4e2d\\u7684\\u67d0\\u4e00\\u4f4d\\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n    /// @param self The mapping in which to flip the tick\\n    /// @param tick The tick to flip\\n    /// @param tickSpacing The spacing between usable ticks\\n    function flipTick(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing\\n    ) internal {\\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\\n        uint256 mask = 1 << bitPos;\\n        self[wordPos] ^= mask;\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        mapping(int16 => uint256) storage self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            // \\u5356\\u51fa token0\\uff08\\u5356\\u51fax\\u4e70\\u5165y\\uff09\\uff0c\\u6b64\\u65f6 tick \\u5e94\\u8be5\\u662f\\u9010\\u6e10\\u53d8\\u5927\\u7684\\uff0c\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\\n                : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self[wordPos] & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(uint24((BitMath.leastSignificantBit(masked) - bitPos)))) * tickSpacing\\n                : (compressed + 1 + int24(uint24((type(uint8).max - bitPos)))) * tickSpacing;\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3df4d69497cd2b08b571b9911d091577bd9f9d6ad76d2277de2e156e57bbbad1\",\"license\":\"MIT\"},\"contracts/lib/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\",\"keccak256\":\"0x4ed462707766eac6fb9e951a5825e487ed5a0a807b3bde8968e19d8704fbc05f\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c60806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633c8a7d8d1461005157806380c2c6ef1461006d578063d34879971461009e578063fa461e33146100ba575b600080fd5b61006b600480360381019061006691906105bd565b6100d6565b005b610087600480360381019061008291906106c5565b610165565b604051610095929190610766565b60405180910390f35b6100b860048036038101906100b3919061078f565b6101f9565b005b6100d460048036038101906100cf919061082f565b610325565b005b8573ffffffffffffffffffffffffffffffffffffffff16633c8a7d8d3387878787876040518763ffffffff1660e01b81526004016101199695949392919061092e565b60408051808303816000875af1158015610137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015b919061099f565b5050505050505050565b6000808673ffffffffffffffffffffffffffffffffffffffff166380c2c6ef33888888886040518663ffffffff1660e01b81526004016101a99594939291906109fd565b60408051808303816000875af11580156101c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101eb9190610a60565b915091509550959350505050565b6000828281019061020a9190610b84565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161025193929190610bb1565b6020604051808303816000875af1158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190610bfd565b50806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b81526004016102da93929190610bb1565b6020604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190610bfd565b505050505050565b600082828101906103369190610b84565b905060008513156103cb57806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161038693929190610bb1565b6020604051808303816000875af11580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c99190610bfd565b505b600084131561045e57806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b815260040161041993929190610bb1565b6020604051808303816000875af1158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c9190610bfd565b505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a482610479565b9050919050565b6104b481610499565b81146104bf57600080fd5b50565b6000813590506104d1816104ab565b92915050565b60008160020b9050919050565b6104ed816104d7565b81146104f857600080fd5b50565b60008135905061050a816104e4565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61053581610510565b811461054057600080fd5b50565b6000813590506105528161052c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261057d5761057c610558565b5b8235905067ffffffffffffffff81111561059a5761059961055d565b5b6020830191508360018202830111156105b6576105b5610562565b5b9250929050565b60008060008060008060a087890312156105da576105d961046f565b5b60006105e889828a016104c2565b96505060206105f989828a016104fb565b955050604061060a89828a016104fb565b945050606061061b89828a01610543565b935050608087013567ffffffffffffffff81111561063c5761063b610474565b5b61064889828a01610567565b92509250509295509295509295565b60008115159050919050565b61066c81610657565b811461067757600080fd5b50565b60008135905061068981610663565b92915050565b6000819050919050565b6106a28161068f565b81146106ad57600080fd5b50565b6000813590506106bf81610699565b92915050565b6000806000806000608086880312156106e1576106e061046f565b5b60006106ef888289016104c2565b95505060206107008882890161067a565b9450506040610711888289016106b0565b935050606086013567ffffffffffffffff81111561073257610731610474565b5b61073e88828901610567565b92509250509295509295909350565b6000819050919050565b6107608161074d565b82525050565b600060408201905061077b6000830185610757565b6107886020830184610757565b9392505050565b600080600080606085870312156107a9576107a861046f565b5b60006107b7878288016106b0565b94505060206107c8878288016106b0565b935050604085013567ffffffffffffffff8111156107e9576107e8610474565b5b6107f587828801610567565b925092505092959194509250565b61080c8161074d565b811461081757600080fd5b50565b60008135905061082981610803565b92915050565b600080600080606085870312156108495761084861046f565b5b60006108578782880161081a565b94505060206108688782880161081a565b935050604085013567ffffffffffffffff81111561088957610888610474565b5b61089587828801610567565b925092505092959194509250565b6108ac81610499565b82525050565b6108bb816104d7565b82525050565b6108ca81610510565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061090d83856108d0565b935061091a8385846108e1565b610923836108f0565b840190509392505050565b600060a08201905061094360008301896108a3565b61095060208301886108b2565b61095d60408301876108b2565b61096a60608301866108c1565b818103608083015261097d818486610901565b9050979650505050505050565b60008151905061099981610699565b92915050565b600080604083850312156109b6576109b561046f565b5b60006109c48582860161098a565b92505060206109d58582860161098a565b9150509250929050565b6109e881610657565b82525050565b6109f78161068f565b82525050565b6000608082019050610a1260008301886108a3565b610a1f60208301876109df565b610a2c60408301866109ee565b8181036060830152610a3f818486610901565b90509695505050505050565b600081519050610a5a81610803565b92915050565b60008060408385031215610a7757610a7661046f565b5b6000610a8585828601610a4b565b9250506020610a9685828601610a4b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610add826108f0565b810181811067ffffffffffffffff82111715610afc57610afb610aa5565b5b80604052505050565b6000610b0f610465565b9050610b1b8282610ad4565b919050565b600060608284031215610b3657610b35610aa0565b5b610b406060610b05565b90506000610b50848285016104c2565b6000830152506020610b64848285016104c2565b6020830152506040610b78848285016104c2565b60408301525092915050565b600060608284031215610b9a57610b9961046f565b5b6000610ba884828501610b20565b91505092915050565b6000606082019050610bc660008301866108a3565b610bd360208301856108a3565b610be060408301846109ee565b949350505050565b600081519050610bf781610663565b92915050565b600060208284031215610c1357610c1261046f565b5b6000610c2184828501610be8565b9150509291505056fea26469706673582212207c3e221e06cba0be88a2d6f8850e87964d0515c9072e37f6a38756ca9262e2b664736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633c8a7d8d1461005157806380c2c6ef1461006d578063d34879971461009e578063fa461e33146100ba575b600080fd5b61006b600480360381019061006691906105bd565b6100d6565b005b610087600480360381019061008291906106c5565b610165565b604051610095929190610766565b60405180910390f35b6100b860048036038101906100b3919061078f565b6101f9565b005b6100d460048036038101906100cf919061082f565b610325565b005b8573ffffffffffffffffffffffffffffffffffffffff16633c8a7d8d3387878787876040518763ffffffff1660e01b81526004016101199695949392919061092e565b60408051808303816000875af1158015610137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015b919061099f565b5050505050505050565b6000808673ffffffffffffffffffffffffffffffffffffffff166380c2c6ef33888888886040518663ffffffff1660e01b81526004016101a99594939291906109fd565b60408051808303816000875af11580156101c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101eb9190610a60565b915091509550959350505050565b6000828281019061020a9190610b84565b9050806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161025193929190610bb1565b6020604051808303816000875af1158015610270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102949190610bfd565b50806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b81526004016102da93929190610bb1565b6020604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190610bfd565b505050505050565b600082828101906103369190610b84565b905060008513156103cb57806000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133886040518463ffffffff1660e01b815260040161038693929190610bb1565b6020604051808303816000875af11580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c99190610bfd565b505b600084131561045e57806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd826040015133876040518463ffffffff1660e01b815260040161041993929190610bb1565b6020604051808303816000875af1158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c9190610bfd565b505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a482610479565b9050919050565b6104b481610499565b81146104bf57600080fd5b50565b6000813590506104d1816104ab565b92915050565b60008160020b9050919050565b6104ed816104d7565b81146104f857600080fd5b50565b60008135905061050a816104e4565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61053581610510565b811461054057600080fd5b50565b6000813590506105528161052c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261057d5761057c610558565b5b8235905067ffffffffffffffff81111561059a5761059961055d565b5b6020830191508360018202830111156105b6576105b5610562565b5b9250929050565b60008060008060008060a087890312156105da576105d961046f565b5b60006105e889828a016104c2565b96505060206105f989828a016104fb565b955050604061060a89828a016104fb565b945050606061061b89828a01610543565b935050608087013567ffffffffffffffff81111561063c5761063b610474565b5b61064889828a01610567565b92509250509295509295509295565b60008115159050919050565b61066c81610657565b811461067757600080fd5b50565b60008135905061068981610663565b92915050565b6000819050919050565b6106a28161068f565b81146106ad57600080fd5b50565b6000813590506106bf81610699565b92915050565b6000806000806000608086880312156106e1576106e061046f565b5b60006106ef888289016104c2565b95505060206107008882890161067a565b9450506040610711888289016106b0565b935050606086013567ffffffffffffffff81111561073257610731610474565b5b61073e88828901610567565b92509250509295509295909350565b6000819050919050565b6107608161074d565b82525050565b600060408201905061077b6000830185610757565b6107886020830184610757565b9392505050565b600080600080606085870312156107a9576107a861046f565b5b60006107b7878288016106b0565b94505060206107c8878288016106b0565b935050604085013567ffffffffffffffff8111156107e9576107e8610474565b5b6107f587828801610567565b925092505092959194509250565b61080c8161074d565b811461081757600080fd5b50565b60008135905061082981610803565b92915050565b600080600080606085870312156108495761084861046f565b5b60006108578782880161081a565b94505060206108688782880161081a565b935050604085013567ffffffffffffffff81111561088957610888610474565b5b61089587828801610567565b925092505092959194509250565b6108ac81610499565b82525050565b6108bb816104d7565b82525050565b6108ca81610510565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061090d83856108d0565b935061091a8385846108e1565b610923836108f0565b840190509392505050565b600060a08201905061094360008301896108a3565b61095060208301886108b2565b61095d60408301876108b2565b61096a60608301866108c1565b818103608083015261097d818486610901565b9050979650505050505050565b60008151905061099981610699565b92915050565b600080604083850312156109b6576109b561046f565b5b60006109c48582860161098a565b92505060206109d58582860161098a565b9150509250929050565b6109e881610657565b82525050565b6109f78161068f565b82525050565b6000608082019050610a1260008301886108a3565b610a1f60208301876109df565b610a2c60408301866109ee565b8181036060830152610a3f818486610901565b90509695505050505050565b600081519050610a5a81610803565b92915050565b60008060408385031215610a7757610a7661046f565b5b6000610a8585828601610a4b565b9250506020610a9685828601610a4b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610add826108f0565b810181811067ffffffffffffffff82111715610afc57610afb610aa5565b5b80604052505050565b6000610b0f610465565b9050610b1b8282610ad4565b919050565b600060608284031215610b3657610b35610aa0565b5b610b406060610b05565b90506000610b50848285016104c2565b6000830152506020610b64848285016104c2565b6020830152506040610b78848285016104c2565b60408301525092915050565b600060608284031215610b9a57610b9961046f565b5b6000610ba884828501610b20565b91505092915050565b6000606082019050610bc660008301866108a3565b610bd360208301856108a3565b610be060408301846109ee565b949350505050565b600081519050610bf781610663565b92915050565b600060208284031215610c1357610c1261046f565b5b6000610c2184828501610be8565b9150509291505056fea26469706673582212207c3e221e06cba0be88a2d6f8850e87964d0515c9072e37f6a38756ca9262e2b664736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}